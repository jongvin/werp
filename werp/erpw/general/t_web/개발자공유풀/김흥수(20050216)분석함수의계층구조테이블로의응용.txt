* 최하위여부 구하기
먼저 테이블의 구조를 말하면
TAC_E_EXEC_LIST_MASTER 테이블은 실행내역 테이블이며
TAC_E_PART_STRUCTURE 테이블은 실행내역의 구조를 가지고 있는 테이블이다.
TAC_E_PART_STRUCTURE 테이블의 키는 PROJ_CODE 와 ITEM_SEQ 이며 UP_LVL은 ITEM_SEQ를 가리키는 자기 참조 형태의
계층구조 테이블이다.
모든 루트노드의 UP_LVL은 0의 값을 갖는다.
LVL_SEQ 컬럼은 동일한 레벨내에서의 순번을 갖는다.
먼저 가볍게 계층구조적 질의를 해보자

Select
	b.PROJ_CODE ,
	a.CHG_DEGREE ,
	b.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| b.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(b.NAME,'/'),1,40) FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	a.EXEC_MATR_AMT
From	TAC_E_EXEC_LIST_MASTER a,
		TAC_E_PART_STRUCTURE b
Where	a.PROJ_CODE = b.PROJ_CODE
And		a.ITEM_SEQ = b.ITEM_SEQ
And		a.PROJ_CODE = 'K04099'
And		a.CHG_DEGREE = 2
Start With
	b.UP_LVL = 0
Connect By
		Prior	b.PROJ_CODE = b.PROJ_CODE
	And	Prior	b.ITEM_SEQ = b.UP_LVL
Order Siblings By
	b.LVL_SEQ

결과는 아래와 같다

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- -------------
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0

21 개의 행이 선택되었습니다.


여기서 SubStrb 함수를 쓴 이유는 Oracle에게 명백하게 컬럼의 길이를 알려줘서 보기 좋게 출력하기 위해서이다.
또한 RPad(' ',(Level-1)*2,' ')|| b.NAME 이거는 들여쓰기를 위해서 사용하였으며
sys_connect_by_path(b.NAME,'/')는 전체 경로를 출력하기 위하여 이다.
그런데 우리가 여기서 Order Siblings By를 사용한 것은 동일 레벨에서 레벨내 순번에 따라 출력하기 위한 것이었는데
우리가 원한것과는 다르게 순서가 올바르게 오지 않았다.
정확하게 왔다면 아마 공통가설공사가 제일 위에 왔어야 한다.
뿐만 아니라 자세히 보면 아예 데이타도 틀리게 온다는 것을 알 수 있다.(/건축공사/철근콘크리트공사등이 두번 나온다.)
대부분 Connect by를 join한 테이블에 직접 사용하면 원하는 결과가 안온다.

위의 SQL을 아래와 같이 바꾸면 원하는 결과가 온다.
(자세히 보면 Connect By절에 Where 절에서와 같은 상수조건을 준것을 볼 수 있다....그래도 이해가 안된다....
Connect by가 Join과 같이 평가된다는 뜻인가?)
Select
	b.PROJ_CODE ,
	a.CHG_DEGREE ,
	b.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| b.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(b.NAME,'/'),1,40) FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	a.EXEC_MATR_AMT
From	TAC_E_EXEC_LIST_MASTER a,
		TAC_E_PART_STRUCTURE b
Where	a.PROJ_CODE = b.PROJ_CODE
And		a.ITEM_SEQ = b.ITEM_SEQ
And		a.PROJ_CODE = 'K04099'
And		a.CHG_DEGREE = 2
Start With
	b.UP_LVL = 0
Connect By
		Prior	b.PROJ_CODE = b.PROJ_CODE
	And	Prior	b.ITEM_SEQ = b.UP_LVL
	And	Prior	a.CHG_DEGREE = 2
Order Siblings By
	b.LVL_SEQ


PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- -------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0

13 개의 행이 선택되었습니다.

하지만 가능하면 아래와 같이 하시기를
왜냐면 더 이해하기 쉬운 SQL이 되기 때문이며 실수할 확률이 줄어든다.

Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ

결과는 같다.

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- -------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0

13 개의 행이 선택되었습니다.

자 이제부터 본격적으로 계층구조 테이블에 분석함수를 써보자

1. 최하위여부 구하기

계층구조 테이블이 최하위인지를 알기 위해서는 해당 행을 부모로 하는 행이 없다는 것을 말한다.
그러면 어떻게하면 이것을 할 수 있을까.
1-1. 먼저 외부조인을 사용하여 알아보자
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	IS_LEAF_TAG
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			Decode(Count(c.ITEM_SEQ) ,0,'T','F') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b,
				TAC_E_PART_STRUCTURE c
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
		And		b.PROJ_CODE = c.PROJ_CODE (+)
		And		b.ITEM_SEQ = c.UP_LVL (+)
		Group By
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ

결과는

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT I
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- -
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000 F
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0 T
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0 T
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0 T
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0 T
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000 T
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0 T
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000 F
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000 T
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0 T
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0 T
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0 T
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0 T

13 개의 행이 선택되었습니다.

올바르게 왔다.
그럼 질의계획은


----------------------------------------------------------------------------------------------
| Id  | Operation                          |  Name                   | Rows  | Bytes | Cost  |
----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                   |                         |     6 |   546 |    10 |
|*  1 |  CONNECT BY WITH FILTERING         |                         |       |       |       |
|*  2 |   FILTER                           |                         |       |       |       |
|   3 |    COUNT                           |                         |       |       |       |
|   4 |     VIEW                           |                         |     6 |   546 |    10 |
|   5 |      SORT GROUP BY                 |                         |     6 |   276 |    10 |
|*  6 |       HASH JOIN OUTER              |                         |     6 |   276 |     8 |
|*  7 |        HASH JOIN                   |                         |     6 |   210 |     5 |
|   8 |         TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|*  9 |          INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  10 |         TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
|  11 |        TABLE ACCESS FULL           | TAC_E_PART_STRUCTURE    |    24 |   264 |     2 |
|  12 |   HASH JOIN                        |                         |       |       |       |
|  13 |    CONNECT BY PUMP                 |                         |       |       |       |
|  14 |    COUNT                           |                         |       |       |       |
|  15 |     VIEW                           |                         |     6 |   546 |    10 |
|  16 |      SORT GROUP BY                 |                         |     6 |   276 |    10 |
|* 17 |       HASH JOIN OUTER              |                         |     6 |   276 |     8 |
|* 18 |        HASH JOIN                   |                         |     6 |   210 |     5 |
|  19 |         TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|* 20 |          INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  21 |         TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
|  22 |        TABLE ACCESS FULL           | TAC_E_PART_STRUCTURE    |    24 |   264 |     2 |
----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("A"."UP_LVL"=0)
   2 - filter("A"."UP_LVL"=0)
   6 - access("B"."PROJ_CODE"="C"."PROJ_CODE"(+) AND "B"."ITEM_SEQ"="C"."UP_LVL"(+))
   7 - access("A"."PROJ_CODE"="B"."PROJ_CODE" AND "A"."ITEM_SEQ"="B"."ITEM_SEQ")
   9 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
  17 - access("B"."PROJ_CODE"="C"."PROJ_CODE"(+) AND "B"."ITEM_SEQ"="C"."UP_LVL"(+))
  18 - access("A"."PROJ_CODE"="B"."PROJ_CODE" AND "A"."ITEM_SEQ"="B"."ITEM_SEQ")
  20 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)

Note: cpu costing is off

1-2. 다음은 스칼라 서브쿼리로 해보자
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	IS_LEAF_TAG
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			Decode((
				Select
					Count(*)
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
			) ,0,'T','F') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
		Group By
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ

결과는 동일하다.
그럼 질의 계획은

---------------------------------------------------------------------------------------------
| Id  | Operation                         |  Name                   | Rows  | Bytes | Cost  |
---------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                  |                         |     6 |   546 |     7 |
|*  1 |  CONNECT BY WITH FILTERING        |                         |       |       |       |
|*  2 |   FILTER                          |                         |       |       |       |
|   3 |    COUNT                          |                         |       |       |       |
|   4 |     VIEW                          |                         |     6 |   546 |     7 |
|   5 |      SORT GROUP BY                |                         |     6 |   210 |     7 |
|*  6 |       HASH JOIN                   |                         |     6 |   210 |     5 |
|   7 |        TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|*  8 |         INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|   9 |        TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
|  10 |   HASH JOIN                       |                         |       |       |       |
|  11 |    CONNECT BY PUMP                |                         |       |       |       |
|  12 |    COUNT                          |                         |       |       |       |
|  13 |     VIEW                          |                         |     6 |   546 |     7 |
|  14 |      SORT GROUP BY                |                         |     6 |   210 |     7 |
|* 15 |       HASH JOIN                   |                         |     6 |   210 |     5 |
|  16 |        TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|* 17 |         INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  18 |        TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
---------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("A"."UP_LVL"=0)
   2 - filter("A"."UP_LVL"=0)
   6 - access("A"."PROJ_CODE"="SYS_ALIAS_2"."PROJ_CODE" AND "A"."ITEM_SEQ"="SYS_ALIAS_2"."
              ITEM_SEQ")
   8 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
  15 - access("A"."PROJ_CODE"="SYS_ALIAS_2"."PROJ_CODE" AND "A"."ITEM_SEQ"="SYS_ALIAS_2"."
              ITEM_SEQ")
  17 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)

Note: cpu costing is off

얼핏 보기에는 좋아진 것 같다. 왜냐면 Cost가 7이니까
그러나 스칼라 서브쿼리 부분은 질의계획에 안나타난다.
아마도 아래와 같이 해준다면 더욱 빨라질지도 모른다.
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	IS_LEAF_TAG
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			Decode((
			/*+first_rows */
				Select
					1
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
				And		RowNum < 2
			) ,1,'F','T') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ

1-3. 이제 분석함수를 써보자 분석함수를 쓸때의 아이디어는 이렇다.
순방향의 Connect By로 오는 데이타는 다음의 특성을 갖는다.
	1) 상위 레벨이 항상 먼저 온다.
	2) 상위노드의 바로 뒤에 해당 노드의 자식노드들이 뒤따른다.
자 이쯤 되면 뭔가 필이 오지 않는가?
그렇다. 바로 다음 레코드에 접근하는 Lead 분석함수를 사용하면 이것을 할 수 있다.
즉 자신의 ITEM_SEQ와 같은 UP_LVL을 갖는 레코드가 바로 다음에 있으면 이것은 최하위가 아니다는 것이다.
SQL은 다음과 같다.
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	a.NAME,
	a.FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG
From
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
			SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			RowNum RN
		From
			(
				Select
					b.PROJ_CODE ,
					a.CHG_DEGREE ,
					b.ITEM_SEQ ,
					b.NAME,
					b.UP_LVL ,
					b.LVL_SEQ ,
					a.EXEC_MATR_AMT
				From	TAC_E_EXEC_LIST_MASTER a,
						TAC_E_PART_STRUCTURE b
				Where	a.PROJ_CODE = b.PROJ_CODE
				And		a.ITEM_SEQ = b.ITEM_SEQ
				And		a.PROJ_CODE = 'K04099'
				And		a.CHG_DEGREE = 2
			) a
		Start With
			a.UP_LVL = 0
		Connect By
				Prior	a.PROJ_CODE = a.PROJ_CODE
			And	Prior	a.ITEM_SEQ = a.UP_LVL
		Order Siblings By
			a.LVL_SEQ
	) a
Order By Rn

다소 복잡해진듯 하다.
그러나 질의계획을 보면 달라진 것을 알 수 있다.


----------------------------------------------------------------------------------------------
| Id  | Operation                          |  Name                   | Rows  | Bytes | Cost  |
----------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                   |                         |     6 |   744 |     7 |
|   1 |  WINDOW SORT                       |                         |     6 |   744 |     7 |
|   2 |   VIEW                             |                         |     6 |   744 |     7 |
|   3 |    COUNT                           |                         |       |       |       |
|*  4 |     CONNECT BY WITH FILTERING      |                         |       |       |       |
|*  5 |      FILTER                        |                         |       |       |       |
|   6 |       COUNT                        |                         |       |       |       |
|*  7 |        HASH JOIN                   |                         |     6 |   210 |     5 |
|   8 |         TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|*  9 |          INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  10 |         TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
|  11 |      HASH JOIN                     |                         |       |       |       |
|  12 |       CONNECT BY PUMP              |                         |       |       |       |
|  13 |       COUNT                        |                         |       |       |       |
|* 14 |        HASH JOIN                   |                         |     6 |   210 |     5 |
|  15 |         TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|* 16 |          INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  17 |         TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
----------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - filter("B"."UP_LVL"=0)
   5 - filter("B"."UP_LVL"=0)
   7 - access("A"."PROJ_CODE"="B"."PROJ_CODE" AND "A"."ITEM_SEQ"="B"."ITEM_SEQ")
   9 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
  14 - access("A"."PROJ_CODE"="B"."PROJ_CODE" AND "A"."ITEM_SEQ"="B"."ITEM_SEQ")
  16 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)

Note: cpu costing is off

스칼라 서브쿼리가 없는 상태에서 Cost가 7인 것을 알 수 있다.
즉 이 질의가 앞의 두가지 예보다 더 좋은 계획으로 수행될 것임을 알 수 있다.
게다가 테이블로의 접근을 한번 줄였으며 해당 테이블이 많은 레코드를 갖는다면
상대적으로 한 현장으로 제한된 결과집합이 전체 현장에 비해 아주 작아지면 작아질수록
이 질의는 더 우수한 성능을 발휘할 것이다.


2. 자 이제 다음은 계층구조에대한 상위집계를 SQL로 표현해보자
위의 질의를 보면 EXEC_MATR_AMT이라는 컬럼이 있다.
물론 이컬럼은 저장시점에 이미 상위로 집계되어 있다.
그런데 만약 이 컬럼이 상위로 집계되어 있지 않다면 어떻게 하면 상위로 집계하여 표현할 수 있을까?
2-1. 스칼라 서브쿼리를 사용하여 집계한다.
이 방법은 모든 최하위 노드가 아닌 행에 대하여 그행부터 시작하여 하위행으로 값을 집계하는 방법이다.
좀 복잡하지만 잘 보시길....

Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.IS_LEAF_TAG,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_MATR_AMT_SUM
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			Decode((
			/*+first_rows */
				Select
					1
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
				And		RowNum < 2
			) ,1,'F','T') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ


결과는

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT I EXEC_MATR_AMT_SUM
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- - -----------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000 F           2600000
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5             0 T                 0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6             0 T                 0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7             0 T                 0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9             0 T                 0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14       2600000 T           2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15             0 T                 0
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000 F          40000000
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1      40000000 T          40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2             0 T                 0
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0 T                 0
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0 T                 0
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0 T                 0

13 개의 행이 선택되었습니다.

원하는 결과가 왔다.
그럼 질의 계획은 어떤가?


--------------------------------------------------------------------------------------------
| Id  | Operation                        |  Name                   | Rows  | Bytes | Cost  |
--------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                 |                         |     6 |   546 |     7 |
|*  1 |  CONNECT BY WITH FILTERING       |                         |       |       |       |
|*  2 |   FILTER                         |                         |       |       |       |
|   3 |    COUNT                         |                         |       |       |       |
|   4 |     VIEW                         |                         |     6 |   546 |     5 |
|*  5 |      HASH JOIN                   |                         |     6 |   210 |     5 |
|   6 |       TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|*  7 |        INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|   8 |       TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
|   9 |   HASH JOIN                      |                         |       |       |       |
|  10 |    CONNECT BY PUMP               |                         |       |       |       |
|  11 |    COUNT                         |                         |       |       |       |
|  12 |     VIEW                         |                         |     6 |   546 |     5 |
|* 13 |      HASH JOIN                   |                         |     6 |   210 |     5 |
|  14 |       TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     6 |    72 |     2 |
|* 15 |        INDEX RANGE SCAN          | SYS_C004567             |     6 |       |     1 |
|  16 |       TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE    |    24 |   552 |     2 |
--------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   1 - filter("SYS_ALIAS_3"."UP_LVL"=0)
   2 - filter("SYS_ALIAS_3"."UP_LVL"=0)
   5 - access("A"."PROJ_CODE"="SYS_ALIAS_2"."PROJ_CODE" AND "A"."ITEM_SEQ"="SYS_ALIAS_2".
              "ITEM_SEQ")
   7 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
  13 - access("A"."PROJ_CODE"="SYS_ALIAS_2"."PROJ_CODE" AND "A"."ITEM_SEQ"="SYS_ALIAS_2".
              "ITEM_SEQ")
  15 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)

Note: cpu costing is off

음 상당히 좋아보인다 왜냐면 Cost가 7이니까
그러나 위에서도 말했듯이 스칼라 서브쿼리는 질의 계획에 안나타난다.
게다가 우리가 사용한 스칼라서브쿼리는 위에서 사용한 Cost 7짜리의 SQL과 동일하다.
Cost가 꽤 많이 든다는 뜻이다.
덧붙여서 집계할 컬럼이 많아진다면 우리는 동일한 스칼라 서브쿼리를 여러번 써야할 것이며
이는 성능에 아주 나쁜 영향을 줄것이다.

2-2. 분석함수를 사용한다.
분석함수를 사용하는 것의 아이디어는 이렇다.
	1) 먼저 분석함수를 활용하여 최하위행의 ITEM_SEQ 와 상위 노드의 ITEM_SEQ를 서로 매칭시킨다.(이것이 작업의 핵심이다.)
	자 예를 통하여 살펴보자
	먼저 지금까지 했던것과는 다르게 역전개 Connect by 를 해보자(역전개라는 것은 하위에서 상위로 전개하는 것이다.)
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	RowNum RN,
	Level Lv
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.UP_LVL = a.ITEM_SEQ

결과는 다음과 같다.

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT         RN         LV
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- ---------- ----------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1       2600000          1          1
K04099              2        568 경비용역                       /경비용역                                       567          5             0          2          1
K04099              2        567   공통가설공사                 /경비용역/공통가설공사                            0          1       2600000          3          2
K04099              2        569 가설전기공사                   /가설전기공사                                   567          6             0          4          1
K04099              2        567   공통가설공사                 /가설전기공사/공통가설공사                        0          1       2600000          5          2
K04099              2        570 가설용수공사                   /가설용수공사                                   567          7             0          6          1
K04099              2        567   공통가설공사                 /가설용수공사/공통가설공사                        0          1       2600000          7          2
K04099              2        571 적산용역                       /적산용역                                       567          9             0          8          1
K04099              2        567   공통가설공사                 /적산용역/공통가설공사                            0          1       2600000          9          2
K04099              2        572 가설사무실공사                 /가설사무실공사                                 567         14       2600000         10          1
K04099              2        567   공통가설공사                 /가설사무실공사/공통가설공사                      0          1       2600000         11          2
K04099              2        573 공통가설공사 기타              /공통가설공사 기타                              567         15             0         12          1
K04099              2        567   공통가설공사                 /공통가설공사 기타/공통가설공사                   0          1       2600000         13          2
K04099              2        575 건축공사                       /건축공사                                         0          2      40000000         14          1
K04099              2        576 철근콘크리트공사               /철근콘크리트공사                               575          1      40000000         15          1
K04099              2        575   건축공사                     /철근콘크리트공사/건축공사                        0          2      40000000         16          2
K04099              2        630 방수공사                       /방수공사                                       575          2             0         17          1
K04099              2        575   건축공사                     /방수공사/건축공사                                0          2      40000000         18          2
K04099              2        769 공과잡비                       /공과잡비                                         0          3             0         19          1
K04099              2        770 현장관리비                     /현장관리비                                       0          4             0         20          1
K04099              2        771 안전관리비                     /안전관리비                                       0          5             0         21          1

21 개의 행이 선택되었습니다.


자 잘보면 계층구조가 밑에서 위로의 형태를 갖는 것을 알 수 있다.
또한 Level 의사열이 갖는 값 또한 계층구조 추적단계의 역임을 알 수 있다.
자 이 자료에서 자신의 ITEM_SEQ와 자신의 최하위 행의 ITEM_SEQ를 매칭시킬 방법을 찾아보자
자료를 보면 계층구조의 자료 전개 특성상 자신의 최하위 ITEM_SEQ가 자신의 레벨보다 반드시 1 만큼 작은 행수 위에 있음을 알 수 있다.
예를 들어 ITEM_SEQ 630인 방수공사는 그 상위가 ITEM_SEQ가 575인 건축공사이며 이때의 건축공사는 LV(즉 레벨)이 2 이고 건축공사 바로 앞의 행에
방수공사가 있다.
이 자료의 경우 레벨이 깊어야 2레벨밖에 안되어서 눈에 잘 안들어 올 수도 있다.
그럼 레벨이 3까지 가는 다음의 예를 보면 이야기가 더 명확할 것이다.

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT         RN         LV
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- ---------- ----------
K04100              0          1 공통공사                       /공통공사                                         0          1                        1          1
K04100              0          2 가설공사                       /가설공사                                         1          1                        2          1
K04100              0          1   공통공사                     /가설공사/공통공사                                0          1                        3          2
K04100              0          3 가설건물                       /가설건물                                         1          2                        4          1
K04100              0          1   공통공사                     /가설건물/공통공사                                0          1                        5          2
K04100              0          4 부대시설                       /부대시설                                         1          3                        6          1
K04100              0          1   공통공사                     /부대시설/공통공사                                0          1                        7          2
K04100              0          5 가설설비                       /가설설비                                         1          4                        8          1
K04100              0          1   공통공사                     /가설설비/공통공사                                0          1                        9          2
K04100              0          6 공통장비                       /공통장비                                         1          5                       10          1
K04100              0          1   공통공사                     /공통장비/공통공사                                0          1                       11          2
K04100              0          7 현장관리비                     /현장관리비                                       1          6                       12          1
K04100              0          1   공통공사                     /현장관리비/공통공사                              0          1                       13          2
K04100              0          8 건축공사                       /건축공사                                         0          2                       14          1
K04100              0          9 지정공사                       /지정공사                                         8          1                       15          1
K04100              0          8   건축공사                     /지정공사/건축공사                                0          2                       16          2
K04100              0         10 기계공사                       /기계공사                                         0          3                       17          1
K04100              0         11 기계설비공사                   /기계설비공사                                    10          1                       18          1
K04100              0         10   기계공사                     /기계설비공사/기계공사                            0          3                       19          2
K04100              0         13 철근콘크리트공사               /철근콘크리트공사                                 8          2                       20          1
K04100              0          8   건축공사                     /철근콘크리트공사/건축공사                        0          2                       21          2
K04100              0         14 거푸집공사                     /거푸집공사                                      13          1                       22          1
K04100              0         13   철근콘크리트공사             /거푸집공사/철근콘크리트공사                      8          2                       23          2
K04100              0          8     건축공사                   /거푸집공사/철근콘크리트공사/건축공사             0          2                       24          3
K04100              0         15 철근 및 보강재공사             /철근 및 보강재공사                              13          2                       25          1
K04100              0         13   철근콘크리트공사             /철근 및 보강재공사/철근콘크리트공사              8          2                       26          2
K04100              0          8     건축공사                   /철근 및 보강재공사/철근콘크리트공사/건           0          2                       27          3

27 개의 행이 선택되었습니다.

이 예에서 거푸집공사를 보면 더 명확해진다.
그럼 이러한 점에 착안하면 분석함수의 First_Value에 Window절을 포함하면 우리가 원하는 결과가 옴을 알 수 있다.
다음의 그 SQL이다.

Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	a.NAME,
	a.FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.RN,
	a.Lv,
	First_Value(a.item_seq) Over(Order By  rn Range Lv - 1 Preceding ) LEAF_ITEM_SEQ
From
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
			SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			RowNum RN,
			Level Lv
		From
			(
				Select
					b.PROJ_CODE ,
					a.CHG_DEGREE ,
					b.ITEM_SEQ ,
					b.NAME,
					b.UP_LVL ,
					b.LVL_SEQ ,
					a.EXEC_MATR_AMT
				From	TAC_E_EXEC_LIST_MASTER a,
						TAC_E_PART_STRUCTURE b
				Where	a.PROJ_CODE = b.PROJ_CODE
				And		a.ITEM_SEQ = b.ITEM_SEQ
				And		a.PROJ_CODE = 'K04100'
				And		a.CHG_DEGREE = 0
			) a
		Connect By
				Prior	a.PROJ_CODE = a.PROJ_CODE
			And	Prior	a.UP_LVL = a.ITEM_SEQ
	) a

자 여기서 First_Value(a.item_seq) Over(Order By  rn Range Lv - 1 Preceding ) 절을 보면
Lv - 1 행을 위쪽으로 뒤져서 나오는 첫번째 Item_seq를 구하라는 뜻이다.
원하는 대로 결과가 나오는지 보자

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT         RN         LV LEAF_ITEM_SEQ
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- ---------- ---------- -------------
K04100              0          1 공통공사                       /공통공사                                         0          1                        1          1             1
K04100              0          2 가설공사                       /가설공사                                         1          1                        2          1             2
K04100              0          1   공통공사                     /가설공사/공통공사                                0          1                        3          2             2
K04100              0          3 가설건물                       /가설건물                                         1          2                        4          1             3
K04100              0          1   공통공사                     /가설건물/공통공사                                0          1                        5          2             3
K04100              0          4 부대시설                       /부대시설                                         1          3                        6          1             4
K04100              0          1   공통공사                     /부대시설/공통공사                                0          1                        7          2             4
K04100              0          5 가설설비                       /가설설비                                         1          4                        8          1             5
K04100              0          1   공통공사                     /가설설비/공통공사                                0          1                        9          2             5
K04100              0          6 공통장비                       /공통장비                                         1          5                       10          1             6
K04100              0          1   공통공사                     /공통장비/공통공사                                0          1                       11          2             6
K04100              0          7 현장관리비                     /현장관리비                                       1          6                       12          1             7
K04100              0          1   공통공사                     /현장관리비/공통공사                              0          1                       13          2             7
K04100              0          8 건축공사                       /건축공사                                         0          2                       14          1             8
K04100              0          9 지정공사                       /지정공사                                         8          1                       15          1             9
K04100              0          8   건축공사                     /지정공사/건축공사                                0          2                       16          2             9
K04100              0         10 기계공사                       /기계공사                                         0          3                       17          1            10
K04100              0         11 기계설비공사                   /기계설비공사                                    10          1                       18          1            11
K04100              0         10   기계공사                     /기계설비공사/기계공사                            0          3                       19          2            11
K04100              0         13 철근콘크리트공사               /철근콘크리트공사                                 8          2                       20          1            13
K04100              0          8   건축공사                     /철근콘크리트공사/건축공사                        0          2                       21          2            13
K04100              0         14 거푸집공사                     /거푸집공사                                      13          1                       22          1            14
K04100              0         13   철근콘크리트공사             /거푸집공사/철근콘크리트공사                      8          2                       23          2            14
K04100              0          8     건축공사                   /거푸집공사/철근콘크리트공사/건축공사             0          2                       24          3            14
K04100              0         15 철근 및 보강재공사             /철근 및 보강재공사                              13          2                       25          1            15
K04100              0         13   철근콘크리트공사             /철근 및 보강재공사/철근콘크리트공사              8          2                       26          2            15
K04100              0          8     건축공사                   /철근 및 보강재공사/철근콘크리트공사/건           0          2                       27          3            15

27 개의 행이 선택되었습니다.

원하는 결과가 나왔다
여기서 LEAF_ITEM_SEQ 컬럼이 해당 ITEM_SEQ와 매칭되는 최하위 노드의 ITEM_SEQ값이 된다.
그러나 여기서 문제가 되는 것은 최하위행이 아닌것에서 시작하는 행들이다.
예를 들어 첫번째행은 나중에 집계시에 일종의 카티션 프로덕트로 작용할 것이다.
이를 막기위해서는 최하위 노드에서 시작하는 역전개로 바꾸면 되며 다음의 SLQ이 그 방법이다.

Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	a.NAME,
	a.FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.RN,
	a.Lv,
	First_Value(a.item_seq) Over(Order By  rn Range Lv - 1 Preceding ) LEAF_ITEM_SEQ
From
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
			SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			RowNum RN,
			Level Lv
		From
			(
				Select
					a.PROJ_CODE ,
					a.CHG_DEGREE ,
					a.ITEM_SEQ ,
					a.NAME,
					a.UP_LVL ,
					a.LVL_SEQ ,
					a.EXEC_MATR_AMT,
					Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG
				From
					(
						Select
							a.PROJ_CODE ,
							a.CHG_DEGREE ,
							a.ITEM_SEQ ,
							a.NAME,
							a.UP_LVL ,
							a.LVL_SEQ ,
							a.EXEC_MATR_AMT,
							RowNum RN
						From
							(
								Select
									b.PROJ_CODE ,
									a.CHG_DEGREE ,
									b.ITEM_SEQ ,
									b.NAME,
									b.UP_LVL ,
									b.LVL_SEQ ,
									a.EXEC_MATR_AMT
								From	TAC_E_EXEC_LIST_MASTER a,
										TAC_E_PART_STRUCTURE b
								Where	a.PROJ_CODE = b.PROJ_CODE
								And		a.ITEM_SEQ = b.ITEM_SEQ
								And		a.PROJ_CODE = 'K04100'
								And		a.CHG_DEGREE = 0
							) a
						Start With
							a.UP_LVL = 0
						Connect By
								Prior	a.PROJ_CODE = a.PROJ_CODE
							And	Prior	a.ITEM_SEQ = a.UP_LVL
						Order Siblings By
							a.LVL_SEQ
					) a
				Order By Rn
			) a
		Start With a.IS_LEAF_TAG = 'T'
		Connect By
				Prior	a.PROJ_CODE = a.PROJ_CODE
			And	Prior	a.UP_LVL = a.ITEM_SEQ
	) a

결과는 다음과 같다.

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT         RN         LV LEAF_ITEM_SEQ
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ------------- ---------- ---------- -------------
K04100              0          2 가설공사                       /가설공사                                         1          1                        1          1             2
K04100              0          1   공통공사                     /가설공사/공통공사                                0          1                        2          2             2
K04100              0          3 가설건물                       /가설건물                                         1          2                        3          1             3
K04100              0          1   공통공사                     /가설건물/공통공사                                0          1                        4          2             3
K04100              0          4 부대시설                       /부대시설                                         1          3                        5          1             4
K04100              0          1   공통공사                     /부대시설/공통공사                                0          1                        6          2             4
K04100              0          5 가설설비                       /가설설비                                         1          4                        7          1             5
K04100              0          1   공통공사                     /가설설비/공통공사                                0          1                        8          2             5
K04100              0          6 공통장비                       /공통장비                                         1          5                        9          1             6
K04100              0          1   공통공사                     /공통장비/공통공사                                0          1                       10          2             6
K04100              0          7 현장관리비                     /현장관리비                                       1          6                       11          1             7
K04100              0          1   공통공사                     /현장관리비/공통공사                              0          1                       12          2             7
K04100              0          9 지정공사                       /지정공사                                         8          1                       13          1             9
K04100              0          8   건축공사                     /지정공사/건축공사                                0          2                       14          2             9
K04100              0         11 기계설비공사                   /기계설비공사                                    10          1                       15          1            11
K04100              0         10   기계공사                     /기계설비공사/기계공사                            0          3                       16          2            11
K04100              0         14 거푸집공사                     /거푸집공사                                      13          1                       17          1            14
K04100              0         13   철근콘크리트공사             /거푸집공사/철근콘크리트공사                      8          2                       18          2            14
K04100              0          8     건축공사                   /거푸집공사/철근콘크리트공사/건축공사             0          2                       19          3            14
K04100              0         15 철근 및 보강재공사             /철근 및 보강재공사                              13          2                       20          1            15
K04100              0         13   철근콘크리트공사             /철근 및 보강재공사/철근콘크리트공사              8          2                       21          2            15
K04100              0          8     건축공사                   /철근 및 보강재공사/철근콘크리트공사/건           0          2                       22          3            15

22 개의 행이 선택되었습니다.

자 이제 우리가 원하는 최하위 : 중간노드의 매핑 테이블이 생겼다.

다시 원래의 예제로 돌아가서 제 2단계를 해보자

	2) 위에서 만들어진 조인용 테이블을 사용하여 Group by 집계를 한다.(이때 With 구를 사용하면 더욱 좋다.)

SQL은 다음과 같다

With Base_Table As
(
	Select
		a.PROJ_CODE ,
		a.CHG_DEGREE ,
		a.ITEM_SEQ ,
		a.NAME,
		a.FULL_PATH,
		a.UP_LVL ,
		a.LVL_SEQ ,
		a.EXEC_MATR_AMT,
		Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG,
		a.RN
	From
		(
			Select
				a.PROJ_CODE ,
				a.CHG_DEGREE ,
				a.ITEM_SEQ ,
				SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
				SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
				a.UP_LVL ,
				a.LVL_SEQ ,
				a.EXEC_MATR_AMT,
				RowNum RN
			From
				(
					Select
						b.PROJ_CODE ,
						a.CHG_DEGREE ,
						b.ITEM_SEQ ,
						b.NAME,
						b.UP_LVL ,
						b.LVL_SEQ ,
						a.EXEC_MATR_AMT
					From	TAC_E_EXEC_LIST_MASTER a,
							TAC_E_PART_STRUCTURE b
					Where	a.PROJ_CODE = b.PROJ_CODE
					And		a.ITEM_SEQ = b.ITEM_SEQ
					And		a.PROJ_CODE = 'K04099'
					And		a.CHG_DEGREE = 2
				) a
			Start With
				a.UP_LVL = 0
			Connect By
					Prior	a.PROJ_CODE = a.PROJ_CODE
				And	Prior	a.ITEM_SEQ = a.UP_LVL
			Order Siblings By
				a.LVL_SEQ
		) a
)
Select
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN ,
	Sum(a.EXEC_MATR_AMT) EXEC_MATR_AMT_SUM
From	Base_Table a,
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			a.NAME,
			a.FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.RN,
			a.Lv,
			First_Value(a.item_seq) Over(Order By  RnNew Range Lv - 1 Preceding ) LEAF_ITEM_SEQ,
			a.IS_LEAF_TAG
		From
			(
				Select
					a.PROJ_CODE ,
					a.CHG_DEGREE ,
					a.ITEM_SEQ ,
					a.NAME,
					a.FULL_PATH,
					a.UP_LVL ,
					a.LVL_SEQ ,
					a.EXEC_MATR_AMT,
					a.RN,
					RowNum RnNew,
					Level Lv,
					IS_LEAF_TAG
				From	Base_Table a
				Start With a.IS_LEAF_TAG = 'T'
				Connect By
						Prior	a.PROJ_CODE = a.PROJ_CODE
					And	Prior	a.UP_LVL = a.ITEM_SEQ
			) a
	) b
Where	b.PROJ_CODE = a.PROJ_CODE
And		b.CHG_DEGREE = a.CHG_DEGREE
And		b.LEAF_ITEM_SEQ = a.ITEM_SEQ
Group By
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN
Order By
	b.Rn

결과와 질의계획은 다음과 같다.


PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ         RN EXEC_MATR_AMT_SUM
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ---------- -----------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1          1           2600000
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5          2                 0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6          3                 0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7          4                 0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9          5                 0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14          6           2600000
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15          7                 0
K04099              2        575 건축공사                       /건축공사                                         0          2          8          40000000
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1          9          40000000
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2         10                 0
K04099              2        769 공과잡비                       /공과잡비                                         0          3         11                 0
K04099              2        770 현장관리비                     /현장관리비                                       0          4         12                 0
K04099              2        771 안전관리비                     /안전관리비                                       0          5         13                 0

13 개의 행이 선택되었습니다.

경   과: 00:00:00.01

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------
| Id  | Operation                              |  Name                       | Rows  | Bytes | Cost  |
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                       |                             |     6 |   684 |     8 |
|   2 |  TEMP TABLE TRANSFORMATION             |                             |       |       |       |
|   1 |   RECURSIVE EXECUTION                  | SYS_LE_2_0                  |       |       |       |
|   0 |    INSERT STATEMENT                    |                             |     6 |   744 |     8 |
|   1 |     LOAD AS SELECT                     |                             |       |       |       |
|   2 |      WINDOW SORT                       |                             |     6 |   744 |     8 |
|   3 |       VIEW                             |                             |     6 |   744 |     7 |
|   4 |        COUNT                           |                             |       |       |       |
|*  5 |         CONNECT BY WITH FILTERING      |                             |       |       |       |
|*  6 |          FILTER                        |                             |       |       |       |
|   7 |           COUNT                        |                             |       |       |       |
|*  8 |            HASH JOIN                   |                             |     6 |   210 |     5 |
|   9 |             TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER      |     6 |    72 |     2 |
|* 10 |              INDEX RANGE SCAN          | SYS_C004567                 |     6 |       |     1 |
|  11 |             TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE        |    24 |   552 |     2 |
|  12 |          HASH JOIN                     |                             |       |       |       |
|  13 |           CONNECT BY PUMP              |                             |       |       |       |
|  14 |           COUNT                        |                             |       |       |       |
|* 15 |            HASH JOIN                   |                             |     6 |   210 |     5 |
|  16 |             TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER      |     6 |    72 |     2 |
|* 17 |              INDEX RANGE SCAN          | SYS_C004567                 |     6 |       |     1 |
|  18 |             TABLE ACCESS FULL          | TAC_E_PART_STRUCTURE        |    24 |   552 |     2 |
|   3 |   SORT GROUP BY                        |                             |     6 |   684 |     8 |
|*  4 |    HASH JOIN                           |                             |     6 |   684 |     7 |
|   5 |     VIEW                               |                             |     6 |   204 |     2 |
|   6 |      TABLE ACCESS FULL                 | SYS_TEMP_0FD9D6618_28F3E2C  |     6 |   420 |     2 |
|   7 |     VIEW                               |                             |     6 |   480 |     4 |
|   8 |      WINDOW SORT                       |                             |     6 |   744 |     4 |
|   9 |       VIEW                             |                             |     6 |   744 |     2 |
|* 10 |        CONNECT BY WITH FILTERING       |                             |       |       |       |
|* 11 |         FILTER                         |                             |       |       |       |
|  12 |          COUNT                         |                             |       |       |       |
|  13 |           VIEW                         |                             |     6 |   678 |     2 |
|  14 |            TABLE ACCESS FULL           | SYS_TEMP_0FD9D6618_28F3E2C  |     6 |   420 |     2 |
|  15 |         HASH JOIN                      |                             |       |       |       |
|  16 |          CONNECT BY PUMP               |                             |       |       |       |
|  17 |          COUNT                         |                             |       |       |       |
|  18 |           VIEW                         |                             |     6 |   678 |     2 |
|  19 |            TABLE ACCESS FULL           | SYS_TEMP_0FD9D6618_28F3E2C  |     6 |   420 |     2 |
------------------------------------------------------------------------------------------------------


Predicate Information (identified by operation id):
---------------------------------------------------

   5 - filter("B"."UP_LVL"=0)
   6 - filter("B"."UP_LVL"=0)
   8 - access("A"."ITEM_SEQ"="B"."ITEM_SEQ" AND "A"."PROJ_CODE"="B"."PROJ_CODE")
  10 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
  15 - access("A"."ITEM_SEQ"="B"."ITEM_SEQ" AND "A"."PROJ_CODE"="B"."PROJ_CODE")
  17 - access("A"."PROJ_CODE"='K04099' AND "A"."CHG_DEGREE"=2)
   4 - access("B"."PROJ_CODE"="A"."PROJ_CODE" AND "B"."CHG_DEGREE"="A"."CHG_DEGREE" AND "B"."LEAF_I

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              TEM_SEQ"="A"."ITEM_SEQ"
  10 - filter("A"."IS_LEAF_TAG"='T')
  11 - filter("A"."IS_LEAF_TAG"='T')

Note: cpu costing is off

질의결과만 보면 전혀 좋아진 것 같지 않다.
그러나 집계할 컬럼을 추가해보면 결과가 달라진다.
그 이유는 이전 방식은 스칼라 서브쿼리를 쓰기 때문에 질의가 점점 더 느려지기 때문이다.

아래는 컬럼이 늘어난 경우의 실행 결과이다.
(1) 서브쿼리를 쓰는 경우
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.IS_LEAF_TAG,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_SUBCONTR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_SUBCONTR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_SUBCONTR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EQUIP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EQUIP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EQUIP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EXP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_EXP_AMT_SUM
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			a.EXEC_LAB_AMT,
			a.EXEC_SUBCONTR_AMT,
			a.EXEC_EQUIP_AMT,
			a.EXEC_EXP_AMT,
			a.CONTR_MATR_AMT,
			a.CONTR_LAB_AMT,
			a.CONTR_EXP_AMT,
			Decode((
			/*+first_rows */
				Select
					1
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
				And		RowNum < 2
			) ,1,'F','T') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ
/

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT_SUM EXEC_LAB_AMT_SUM EXEC_SUBCONTR_AMT_SUM EXEC_EQUIP_AMT_SUM EXEC_EXP_AMT_SUM CONTR_MATR_AMT_SUM CONTR_LAB_AMT_SUM CONTR_EXP_AMT_SUM
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ----------------- ---------------- --------------------- ------------------ ---------------- ------------------ ----------------- -----------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1           2600000           200000              70000000                  0          1150000                  0                 0                 0
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5                 0                0                     0                  0                0                  0                 0                 0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6                 0                0                     0                  0                0                  0                 0                 0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7                 0                0                     0                  0                0                  0                 0                 0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9                 0                0              10000000                  0            50000                  0                 0                 0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14           2600000           200000              60000000                  0          1100000                  0                 0                 0
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15                 0                0                     0                  0                0                  0                 0                 0
K04099              2        575 건축공사                       /건축공사                                         0          2          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2                 0                0                     0                  0                0                  0                 0                 0
K04099              2        769 공과잡비                       /공과잡비                                         0          3                 0                0                     0                  0                0                  0                 0                 0
K04099              2        770 현장관리비                     /현장관리비                                       0          4                 0                0                     0                  0                0                  0                 0                 0
K04099              2        771 안전관리비                     /안전관리비                                       0          5                 0                0                     0                  0                0                  0                 0                 0

13 개의 행이 선택되었습니다.

경   과: 00:00:00.02

(2) 분석함수를 쓰는 경우
With Base_Table As
(
	Select
		a.PROJ_CODE ,
		a.CHG_DEGREE ,
		a.ITEM_SEQ ,
		a.NAME,
		a.FULL_PATH,
		a.UP_LVL ,
		a.LVL_SEQ ,
		a.EXEC_MATR_AMT,
		a.EXEC_LAB_AMT,
		a.EXEC_SUBCONTR_AMT,
		a.EXEC_EQUIP_AMT,
		a.EXEC_EXP_AMT,
		a.CONTR_MATR_AMT,
		a.CONTR_LAB_AMT,
		a.CONTR_EXP_AMT,
		Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG,
		a.RN
	From
		(
			Select
				a.PROJ_CODE ,
				a.CHG_DEGREE ,
				a.ITEM_SEQ ,
				SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
				SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
				a.UP_LVL ,
				a.LVL_SEQ ,
				a.EXEC_MATR_AMT,
				a.EXEC_LAB_AMT,
				a.EXEC_SUBCONTR_AMT,
				a.EXEC_EQUIP_AMT,
				a.EXEC_EXP_AMT,
				a.CONTR_MATR_AMT,
				a.CONTR_LAB_AMT,
				a.CONTR_EXP_AMT,
				RowNum RN
			From
				(
					Select
						b.PROJ_CODE ,
						a.CHG_DEGREE ,
						b.ITEM_SEQ ,
						b.NAME,
						b.UP_LVL ,
						b.LVL_SEQ ,
						a.EXEC_MATR_AMT,
						a.EXEC_LAB_AMT,
						a.EXEC_SUBCONTR_AMT,
						a.EXEC_EQUIP_AMT,
						a.EXEC_EXP_AMT,
						a.CONTR_MATR_AMT,
						a.CONTR_LAB_AMT,
						a.CONTR_EXP_AMT
					From	TAC_E_EXEC_LIST_MASTER a,
							TAC_E_PART_STRUCTURE b
					Where	a.PROJ_CODE = b.PROJ_CODE
					And		a.ITEM_SEQ = b.ITEM_SEQ
					And		a.PROJ_CODE = 'K04099'
					And		a.CHG_DEGREE = 2
				) a
			Start With
				a.UP_LVL = 0
			Connect By
					Prior	a.PROJ_CODE = a.PROJ_CODE
				And	Prior	a.ITEM_SEQ = a.UP_LVL
			Order Siblings By
				a.LVL_SEQ
		) a
)
Select
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN ,
	Sum(a.EXEC_MATR_AMT) EXEC_MATR_AMT_SUM,
	Sum(a.EXEC_LAB_AMT) EXEC_LAB_AMT_SUM,
	Sum(a.EXEC_SUBCONTR_AMT) EXEC_SUBCONTR_AMT_SUM,
	Sum(a.EXEC_EQUIP_AMT) EXEC_EQUIP_AMT_SUM,
	Sum(a.EXEC_EXP_AMT) EXEC_EXP_AMT_SUM,
	Sum(a.CONTR_MATR_AMT) CONTR_MATR_AMT_SUM,
	Sum(a.CONTR_LAB_AMT) CONTR_LAB_AMT_SUM,
	Sum(a.CONTR_EXP_AMT) CONTR_EXP_AMT_SUM
From	Base_Table a,
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			a.NAME,
			a.FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.RN,
			a.Lv,
			First_Value(a.item_seq) Over(Order By  RnNew Range Lv - 1 Preceding ) LEAF_ITEM_SEQ,
			a.IS_LEAF_TAG
		From
			(
				Select
					a.PROJ_CODE ,
					a.CHG_DEGREE ,
					a.ITEM_SEQ ,
					a.NAME,
					a.FULL_PATH,
					a.UP_LVL ,
					a.LVL_SEQ ,
					a.EXEC_MATR_AMT,
					a.RN,
					RowNum RnNew,
					Level Lv,
					IS_LEAF_TAG
				From	Base_Table a
				Start With a.IS_LEAF_TAG = 'T'
				Connect By
						Prior	a.PROJ_CODE = a.PROJ_CODE
					And	Prior	a.UP_LVL = a.ITEM_SEQ
			) a
	) b
Where	b.PROJ_CODE = a.PROJ_CODE
And		b.CHG_DEGREE = a.CHG_DEGREE
And		b.LEAF_ITEM_SEQ = a.ITEM_SEQ
Group By
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN
Order By
	b.Rn
/

PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ EXEC_MATR_AMT_SUM EXEC_LAB_AMT_SUM EXEC_SUBCONTR_AMT_SUM EXEC_EQUIP_AMT_SUM EXEC_EXP_AMT_SUM CONTR_MATR_AMT_SUM CONTR_LAB_AMT_SUM CONTR_EXP_AMT_SUM
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ----------------- ---------------- --------------------- ------------------ ---------------- ------------------ ----------------- -----------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1           2600000           200000              70000000                  0          1150000                  0                 0                 0
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5                 0                0                     0                  0                0                  0                 0                 0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6                 0                0                     0                  0                0                  0                 0                 0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7                 0                0                     0                  0                0                  0                 0                 0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9                 0                0              10000000                  0            50000                  0                 0                 0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14           2600000           200000              60000000                  0          1100000                  0                 0                 0
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15                 0                0                     0                  0                0                  0                 0                 0
K04099              2        575 건축공사                       /건축공사                                         0          2          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2                 0                0                     0                  0                0                  0                 0                 0
K04099              2        769 공과잡비                       /공과잡비                                         0          3                 0                0                     0                  0                0                  0                 0                 0
K04099              2        770 현장관리비                     /현장관리비                                       0          4                 0                0                     0                  0                0                  0                 0                 0
K04099              2        771 안전관리비                     /안전관리비                                       0          5                 0                0                     0                  0                0                  0                 0                 0

13 개의 행이 선택되었습니다.

경   과: 00:00:00.01


동일한 결과이다.


자 이제 데이타를 많이 만들고 해보자
다음의 SQL로 데이타를 많이 만들었다.
Declare
Begin
For liI In 1..9999 Loop
Insert Into TAC_E_EXEC_LIST_MASTER
(
	PROJ_CODE,
	CHG_DEGREE,
	ITEM_SEQ,
	CRTUSERNO,
	CRTDATE,
	MODUSERNO,
	MODDATE,
	SORT_SEQ,
	PART,
	WBS_CODE,
	NAME,
	SIZ,
	UNIT,
	LVL,
	UP_LVL,
	LVL_SEQ,
	CONTR_MATR_AMT,
	CONTR_LAB_AMT,
	CONTR_EXP_AMT,
	EXEC_MATR_AMT,
	EXEC_LAB_AMT,
	EXEC_SUBCONTR_AMT,
	EXEC_EQUIP_AMT,
	EXEC_EXP_AMT,
	DUTY_DIV,
	INVST_DIV,
	REMARKS,
	CONFIRM_DIV
)
Select
	PROJ_CODE||To_Char(liI,'FM0000'),
	CHG_DEGREE,
	ITEM_SEQ,
	CRTUSERNO,
	CRTDATE,
	MODUSERNO,
	MODDATE,
	SORT_SEQ,
	PART,
	WBS_CODE,
	NAME,
	SIZ,
	UNIT,
	LVL,
	UP_LVL,
	LVL_SEQ,
	CONTR_MATR_AMT,
	CONTR_LAB_AMT,
	CONTR_EXP_AMT,
	EXEC_MATR_AMT,
	EXEC_LAB_AMT,
	EXEC_SUBCONTR_AMT,
	EXEC_EQUIP_AMT,
	EXEC_EXP_AMT,
	DUTY_DIV,
	INVST_DIV,
	REMARKS,
	CONFIRM_DIV
From	TAC_E_EXEC_LIST_MASTER
where	proj_code in ('K04100','K04099');
Insert Into TAC_E_PART_STRUCTURE
(
	PROJ_CODE,
	ITEM_SEQ,
	CRTUSERNO,
	CRTDATE,
	MODUSERNO,
	MODDATE,
	SEQ,
	PART,
	WBS_CODE,
	NAME,
	SIZ,
	UNIT,
	LVL,
	UP_LVL,
	LVL_SEQ
)
Select
	PROJ_CODE||To_Char(liI,'FM0000'),
	ITEM_SEQ,
	CRTUSERNO,
	CRTDATE,
	MODUSERNO,
	MODDATE,
	SEQ,
	PART,
	WBS_CODE,
	NAME,
	SIZ,
	UNIT,
	LVL,
	UP_LVL,
	LVL_SEQ
From	TAC_E_PART_STRUCTURE
Where	proj_code in ('K04100','K04099');
End Loop;
End;
/


SQL> select count(*) from TAC_E_EXEC_LIST_MASTER;

  COUNT(*)
----------
    360000

음 36만건이다.

이제 비용기반을 사용하기 위해 테이블을 분석하고

SQL> analyze table TAC_E_PART_STRUCTURE compute statistics;

테이블이 분석되었습니다.

SQL> analyze table TAC_E_PART_STRUCTURE compute statistics for all indexes;

테이블이 분석되었습니다.

SQL> analyze table TAC_E_PART_STRUCTURE compute statistics for all indexed columns;

테이블이 분석되었습니다.

SQL> analyze table TAC_E_EXEC_LIST_MASTER compute statistics;

테이블이 분석되었습니다.

SQL> analyze table TAC_E_EXEC_LIST_MASTER compute statistics for all indexes;

테이블이 분석되었습니다.

SQL> analyze table TAC_E_EXEC_LIST_MASTER compute statistics for all indexed columns;

테이블이 분석되었습니다.

자 이제 한번 질의 계획을 보자

SQL> set line 2000
SQL> set timing on
SQL> ed afiedt.buf

explain plan for
With Base_Table As
(
	Select
		a.PROJ_CODE ,
		a.CHG_DEGREE ,
		a.ITEM_SEQ ,
		a.NAME,
		a.FULL_PATH,
		a.UP_LVL ,
		a.LVL_SEQ ,
		a.EXEC_MATR_AMT,
		a.EXEC_LAB_AMT,
		a.EXEC_SUBCONTR_AMT,
		a.EXEC_EQUIP_AMT,
		a.EXEC_EXP_AMT,
		a.CONTR_MATR_AMT,
		a.CONTR_LAB_AMT,
		a.CONTR_EXP_AMT,
		Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG,
		a.RN
	From
		(
			Select
				a.PROJ_CODE ,
				a.CHG_DEGREE ,
				a.ITEM_SEQ ,
				SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
				SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
				a.UP_LVL ,
				a.LVL_SEQ ,
				a.EXEC_MATR_AMT,
				a.EXEC_LAB_AMT,
				a.EXEC_SUBCONTR_AMT,
				a.EXEC_EQUIP_AMT,
				a.EXEC_EXP_AMT,
				a.CONTR_MATR_AMT,
				a.CONTR_LAB_AMT,
				a.CONTR_EXP_AMT,
				RowNum RN
			From
				(
					Select
						b.PROJ_CODE ,
						a.CHG_DEGREE ,
						b.ITEM_SEQ ,
						b.NAME,
						b.UP_LVL ,
						b.LVL_SEQ ,
						a.EXEC_MATR_AMT,
						a.EXEC_LAB_AMT,
						a.EXEC_SUBCONTR_AMT,
						a.EXEC_EQUIP_AMT,
						a.EXEC_EXP_AMT,
						a.CONTR_MATR_AMT,
						a.CONTR_LAB_AMT,
						a.CONTR_EXP_AMT
					From	TAC_E_EXEC_LIST_MASTER a,
							TAC_E_PART_STRUCTURE b
					Where	a.PROJ_CODE = b.PROJ_CODE
					And		a.ITEM_SEQ = b.ITEM_SEQ
					And		a.PROJ_CODE = 'K04099'
					And		a.CHG_DEGREE = 2
				) a
			Start With
				a.UP_LVL = 0
			Connect By
					Prior	a.PROJ_CODE = a.PROJ_CODE
				And	Prior	a.ITEM_SEQ = a.UP_LVL
			Order Siblings By
				a.LVL_SEQ
		) a
)
Select
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN ,
	Sum(a.EXEC_MATR_AMT) EXEC_MATR_AMT_SUM,
	Sum(a.EXEC_LAB_AMT) EXEC_LAB_AMT_SUM,
	Sum(a.EXEC_SUBCONTR_AMT) EXEC_SUBCONTR_AMT_SUM,
	Sum(a.EXEC_EQUIP_AMT) EXEC_EQUIP_AMT_SUM,
	Sum(a.EXEC_EXP_AMT) EXEC_EXP_AMT_SUM,
	Sum(a.CONTR_MATR_AMT) CONTR_MATR_AMT_SUM,
	Sum(a.CONTR_LAB_AMT) CONTR_LAB_AMT_SUM,
	Sum(a.CONTR_EXP_AMT) CONTR_EXP_AMT_SUM
From	Base_Table a,
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			a.NAME,
			a.FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.RN,
			a.Lv,
			First_Value(a.item_seq) Over(Order By  RnNew Range Lv - 1 Preceding ) LEAF_ITEM_SEQ,
			a.IS_LEAF_TAG
		From
			(
				Select
					a.PROJ_CODE ,
					a.CHG_DEGREE ,
					a.ITEM_SEQ ,
					a.NAME,
					a.FULL_PATH,
					a.UP_LVL ,
					a.LVL_SEQ ,
					a.EXEC_MATR_AMT,
					a.RN,
					RowNum RnNew,
					Level Lv,
					IS_LEAF_TAG
				From	Base_Table a
				Start With a.IS_LEAF_TAG = 'T'
				Connect By
						Prior	a.PROJ_CODE = a.PROJ_CODE
					And	Prior	a.UP_LVL = a.ITEM_SEQ
			) a
	) b
Where	b.PROJ_CODE = a.PROJ_CODE
And		b.CHG_DEGREE = a.CHG_DEGREE
And		b.LEAF_ITEM_SEQ = a.ITEM_SEQ
Group By
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN
Order By
	b.Rn
/

해석되었습니다.

경   과: 00:00:00.06
SQL> @utlxpls

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------
| Id  | Operation                              |  Name                        | Rows  | Bytes | Cost  |
-------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                       |                              |     7 |  1491 |     8 |
|   2 |  TEMP TABLE TRANSFORMATION             |                              |       |       |       |
|   1 |   RECURSIVE EXECUTION                  | SYS_LE_2_0                   |       |       |       |
|   0 |    INSERT STATEMENT                    |                              |     7 |  1505 |    15 |
|   1 |     LOAD AS SELECT                     |                              |       |       |       |
|   2 |      WINDOW SORT                       |                              |     7 |  1505 |    15 |
|   3 |       VIEW                             |                              |     7 |  1505 |    14 |
|   4 |        COUNT                           |                              |       |       |       |
|   5 |         CONNECT BY WITH FILTERING      |                              |       |       |       |
|   6 |          FILTER                        |                              |       |       |       |
|   7 |           COUNT                        |                              |       |       |       |
|   8 |            NESTED LOOPS                |                              |     7 |   357 |    12 |
|   9 |             TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER       |     7 |   161 |     4 |
|  10 |              INDEX RANGE SCAN          | SYS_C0017768                 |     7 |       |     3 |
|  11 |             TABLE ACCESS BY INDEX ROWID| TAC_E_PART_STRUCTURE         |     1 |    28 |     2 |
|  12 |              INDEX UNIQUE SCAN         | SYS_C0017772                 |     1 |       |     1 |
|  13 |          HASH JOIN                     |                              |       |       |       |
|  14 |           CONNECT BY PUMP              |                              |       |       |       |
|  15 |           COUNT                        |                              |       |       |       |
|  16 |            NESTED LOOPS                |                              |     7 |   357 |    12 |
|  17 |             TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER       |     7 |   161 |     4 |
|  18 |              INDEX RANGE SCAN          | SYS_C0017768                 |     7 |       |     3 |
|  19 |             TABLE ACCESS BY INDEX ROWID| TAC_E_PART_STRUCTURE         |     1 |    28 |     2 |
|  20 |              INDEX UNIQUE SCAN         | SYS_C0017772                 |     1 |       |     1 |
|   3 |   SORT GROUP BY                        |                              |     7 |  1491 |     8 |
|   4 |    HASH JOIN                           |                              |     7 |  1491 |     7 |
|   5 |     VIEW                               |                              |     7 |   903 |     2 |
|   6 |      TABLE ACCESS FULL                 | SYS_TEMP_0FD9D6600_20E14443  |     7 |   567 |     2 |
|   7 |     VIEW                               |                              |     7 |   588 |     4 |
|   8 |      WINDOW SORT                       |                              |     7 |   959 |     4 |
|   9 |       VIEW                             |                              |     7 |   959 |     2 |
|  10 |        COUNT                           |                              |       |       |       |
|  11 |         CONNECT BY WITH FILTERING      |                              |       |       |       |
|  12 |          FILTER                        |                              |       |       |       |
|  13 |           COUNT                        |                              |       |       |       |
|  14 |            VIEW                        |                              |     7 |   791 |     2 |
|  15 |             TABLE ACCESS FULL          | SYS_TEMP_0FD9D6600_20E14443  |     7 |   567 |     2 |
|  16 |          HASH JOIN                     |                              |       |       |       |
|  17 |           CONNECT BY PUMP              |                              |       |       |       |
|  18 |           COUNT                        |                              |       |       |       |
|  19 |            VIEW                        |                              |     7 |   791 |     2 |
|  20 |             TABLE ACCESS FULL          | SYS_TEMP_0FD9D6600_20E14443  |     7 |   567 |     2 |
-------------------------------------------------------------------------------------------------------

Note: cpu costing is off, 'plan_table' is old version

49 개의 행이 선택되었습니다.

경   과: 00:00:00.05
SQL> ed afiedt.buf

explain plan for
Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.IS_LEAF_TAG,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_SUBCONTR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_SUBCONTR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_SUBCONTR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EQUIP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EQUIP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EQUIP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EXP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_EXP_AMT_SUM
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			a.EXEC_LAB_AMT,
			a.EXEC_SUBCONTR_AMT,
			a.EXEC_EQUIP_AMT,
			a.EXEC_EXP_AMT,
			a.CONTR_MATR_AMT,
			a.CONTR_LAB_AMT,
			a.CONTR_EXP_AMT,
			Decode((
			/*+first_rows */
				Select
					1
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
				And		RowNum < 2
			) ,1,'F','T') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ
/

해석되었습니다.

경   과: 00:00:00.00
SQL> @utlxpls

PLAN_TABLE_OUTPUT
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------
| Id  | Operation                        |  Name                   | Rows  | Bytes | Cost  |
--------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                 |                         |     7 |  1274 |    14 |
|   1 |  CONNECT BY WITH FILTERING       |                         |       |       |       |
|   2 |   FILTER                         |                         |       |       |       |
|   3 |    COUNT                         |                         |       |       |       |
|   4 |     VIEW                         |                         |     7 |  1274 |    12 |
|   5 |      NESTED LOOPS                |                         |     7 |   357 |    12 |
|   6 |       TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     7 |   161 |     4 |
|   7 |        INDEX RANGE SCAN          | SYS_C0017768            |     7 |       |     3 |
|   8 |       TABLE ACCESS BY INDEX ROWID| TAC_E_PART_STRUCTURE    |     1 |    28 |     2 |
|   9 |        INDEX UNIQUE SCAN         | SYS_C0017772            |     1 |       |     1 |
|  10 |   HASH JOIN                      |                         |       |       |       |
|  11 |    CONNECT BY PUMP               |                         |       |       |       |
|  12 |    COUNT                         |                         |       |       |       |
|  13 |     VIEW                         |                         |     7 |  1274 |    12 |
|  14 |      NESTED LOOPS                |                         |     7 |   357 |    12 |
|  15 |       TABLE ACCESS BY INDEX ROWID| TAC_E_EXEC_LIST_MASTER  |     7 |   161 |     4 |
|  16 |        INDEX RANGE SCAN          | SYS_C0017768            |     7 |       |     3 |
|  17 |       TABLE ACCESS BY INDEX ROWID| TAC_E_PART_STRUCTURE    |     1 |    28 |     2 |
|  18 |        INDEX UNIQUE SCAN         | SYS_C0017772            |     1 |       |     1 |
--------------------------------------------------------------------------------------------

Note: cpu costing is off, 'plan_table' is old version

26 개의 행이 선택되었습니다.

경   과: 00:00:00.00
SQL> spool off


이 결과를 보면 큰 차이가 없어보인다....
그럼 실제결과는?
실제로 실행해보면


With Base_Table As
(
	Select
		a.PROJ_CODE ,
		a.CHG_DEGREE ,
		a.ITEM_SEQ ,
		a.NAME,
		a.FULL_PATH,
		a.UP_LVL ,
		a.LVL_SEQ ,
		a.EXEC_MATR_AMT,
		a.EXEC_LAB_AMT,
		a.EXEC_SUBCONTR_AMT,
		a.EXEC_EQUIP_AMT,
		a.EXEC_EXP_AMT,
		a.CONTR_MATR_AMT,
		a.CONTR_LAB_AMT,
		a.CONTR_EXP_AMT,
		Decode(Lead(a.UP_LVL) Over ( Order By Rn),a.ITEM_SEQ,'F','T') IS_LEAF_TAG,
		a.RN
	From
		(
			Select
				a.PROJ_CODE ,
				a.CHG_DEGREE ,
				a.ITEM_SEQ ,
				SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
				SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
				a.UP_LVL ,
				a.LVL_SEQ ,
				a.EXEC_MATR_AMT,
				a.EXEC_LAB_AMT,
				a.EXEC_SUBCONTR_AMT,
				a.EXEC_EQUIP_AMT,
				a.EXEC_EXP_AMT,
				a.CONTR_MATR_AMT,
				a.CONTR_LAB_AMT,
				a.CONTR_EXP_AMT,
				RowNum RN
			From
				(
					Select
						b.PROJ_CODE ,
						a.CHG_DEGREE ,
						b.ITEM_SEQ ,
						b.NAME,
						b.UP_LVL ,
						b.LVL_SEQ ,
						a.EXEC_MATR_AMT,
						a.EXEC_LAB_AMT,
						a.EXEC_SUBCONTR_AMT,
						a.EXEC_EQUIP_AMT,
						a.EXEC_EXP_AMT,
						a.CONTR_MATR_AMT,
						a.CONTR_LAB_AMT,
						a.CONTR_EXP_AMT
					From	TAC_E_EXEC_LIST_MASTER a,
							TAC_E_PART_STRUCTURE b
					Where	a.PROJ_CODE = b.PROJ_CODE
					And		a.ITEM_SEQ = b.ITEM_SEQ
					And		a.PROJ_CODE = 'K04099'
					And		a.CHG_DEGREE = 2
				) a
			Start With
				a.UP_LVL = 0
			Connect By
					Prior	a.PROJ_CODE = a.PROJ_CODE
				And	Prior	a.ITEM_SEQ = a.UP_LVL
			Order Siblings By
				a.LVL_SEQ
		) a
)
Select
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN ,
	Sum(a.EXEC_MATR_AMT) EXEC_MATR_AMT_SUM,
	Sum(a.EXEC_LAB_AMT) EXEC_LAB_AMT_SUM,
	Sum(a.EXEC_SUBCONTR_AMT) EXEC_SUBCONTR_AMT_SUM,
	Sum(a.EXEC_EQUIP_AMT) EXEC_EQUIP_AMT_SUM,
	Sum(a.EXEC_EXP_AMT) EXEC_EXP_AMT_SUM,
	Sum(a.CONTR_MATR_AMT) CONTR_MATR_AMT_SUM,
	Sum(a.CONTR_LAB_AMT) CONTR_LAB_AMT_SUM,
	Sum(a.CONTR_EXP_AMT) CONTR_EXP_AMT_SUM
From	Base_Table a,
	(
		Select
			a.PROJ_CODE ,
			a.CHG_DEGREE ,
			a.ITEM_SEQ ,
			a.NAME,
			a.FULL_PATH,
			a.UP_LVL ,
			a.LVL_SEQ ,
			a.RN,
			a.Lv,
			First_Value(a.item_seq) Over(Order By  RnNew Range Lv - 1 Preceding ) LEAF_ITEM_SEQ,
			a.IS_LEAF_TAG
		From
			(
				Select
					a.PROJ_CODE ,
					a.CHG_DEGREE ,
					a.ITEM_SEQ ,
					a.NAME,
					a.FULL_PATH,
					a.UP_LVL ,
					a.LVL_SEQ ,
					a.EXEC_MATR_AMT,
					a.RN,
					RowNum RnNew,
					Level Lv,
					IS_LEAF_TAG
				From	Base_Table a
				Start With a.IS_LEAF_TAG = 'T'
				Connect By
						Prior	a.PROJ_CODE = a.PROJ_CODE
					And	Prior	a.UP_LVL = a.ITEM_SEQ
			) a
	) b
Where	b.PROJ_CODE = a.PROJ_CODE
And		b.CHG_DEGREE = a.CHG_DEGREE
And		b.LEAF_ITEM_SEQ = a.ITEM_SEQ
Group By
	b.PROJ_CODE ,
	b.CHG_DEGREE ,
	b.ITEM_SEQ ,
	b.NAME,
	b.FULL_PATH,
	b.UP_LVL ,
	b.LVL_SEQ ,
	b.RN
Order By
	b.Rn
/
PROJ_CODE  CHG_DEGREE   ITEM_SEQ NAME                           FULL_PATH                                    UP_LVL    LVL_SEQ         RN EXEC_MATR_AMT_SUM EXEC_LAB_AMT_SUM EXEC_SUBCONTR_AMT_SUM EXEC_EQUIP_AMT_SUM EXEC_EXP_AMT_SUM CONTR_MATR_AMT_SUM CONTR_LAB_AMT_SUM CONTR_EXP_AMT_SUM
---------- ---------- ---------- ------------------------------ ---------------------------------------- ---------- ---------- ---------- ----------------- ---------------- --------------------- ------------------ ---------------- ------------------ ----------------- -----------------
K04099              2        567 공통가설공사                   /공통가설공사                                     0          1          1           2600000           200000              70000000                  0          1150000                  0                 0                 0
K04099              2        568   경비용역                     /공통가설공사/경비용역                          567          5          2                 0                0                     0                  0                0                  0                 0                 0
K04099              2        569   가설전기공사                 /공통가설공사/가설전기공사                      567          6          3                 0                0                     0                  0                0                  0                 0                 0
K04099              2        570   가설용수공사                 /공통가설공사/가설용수공사                      567          7          4                 0                0                     0                  0                0                  0                 0                 0
K04099              2        571   적산용역                     /공통가설공사/적산용역                          567          9          5                 0                0              10000000                  0            50000                  0                 0                 0
K04099              2        572   가설사무실공사               /공통가설공사/가설사무실공사                    567         14          6           2600000           200000              60000000                  0          1100000                  0                 0                 0
K04099              2        573   공통가설공사 기타            /공통가설공사/공통가설공사 기타                 567         15          7                 0                0                     0                  0                0                  0                 0                 0
K04099              2        575 건축공사                       /건축공사                                         0          2          8          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        576   철근콘크리트공사             /건축공사/철근콘크리트공사                      575          1          9          40000000         50000000                     0                  0         10000000                  0                 0                 0
K04099              2        630   방수공사                     /건축공사/방수공사                              575          2         10                 0                0                     0                  0                0                  0                 0                 0
K04099              2        769 공과잡비                       /공과잡비                                         0          3         11                 0                0                     0                  0                0                  0                 0                 0
K04099              2        770 현장관리비                     /현장관리비                                       0          4         12                 0                0                     0                  0                0                  0                 0                 0
K04099              2        771 안전관리비                     /안전관리비                                       0          5         13                 0                0                     0                  0                0                  0                 0                 0

13 개의 행이 선택되었습니다.

경   과: 00:00:00.01

우와 36만건으로 데이타가 늘어나도 SQL의 질의 응답시간에는 거의 변화가 없다.
즉 이 SQL은 데이타의 증가와 거의 무관하다는....
즉 좋은 SQL이라는 뜻이다.

아래의 스칼라 서브쿼리를 쓰는 것은 지금 현재 2시간째 돌고 있다.

Select
	a.PROJ_CODE ,
	a.CHG_DEGREE ,
	a.ITEM_SEQ ,
	SubStrb(RPad(' ',(Level-1)*2,' ')|| a.NAME,1,30) NAME,
	SubStrb(sys_connect_by_path(a.NAME,'/'),1,40) FULL_PATH,
	a.UP_LVL ,
	a.LVL_SEQ ,
	a.EXEC_MATR_AMT,
	a.IS_LEAF_TAG,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_SUBCONTR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_SUBCONTR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_SUBCONTR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EQUIP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EQUIP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EQUIP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.EXEC_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.EXEC_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) EXEC_EXP_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_MATR_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_MATR_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_MATR_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_LAB_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_LAB_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_LAB_AMT_SUM,
	Decode(a.IS_LEAF_TAG,'T',a.CONTR_EXP_AMT,(
		Select
			Sum(Decode(
				(
				/*+first_rows */
					Select
						1
					From	TAC_E_PART_STRUCTURE ccc
					Where	bb.PROJ_CODE = ccc.PROJ_CODE
					And		bb.ITEM_SEQ = ccc.UP_LVL
					And		RowNum < 2
				)
			,1,0,aa.CONTR_EXP_AMT))
		From	TAC_E_EXEC_LIST_MASTER aa,
				TAC_E_PART_STRUCTURE bb
		Where	aa.PROJ_CODE = bb.PROJ_CODE
		And		aa.ITEM_SEQ = bb.ITEM_SEQ
		And		aa.PROJ_CODE = a.PROJ_CODE
		And		aa.CHG_DEGREE = a.CHG_DEGREE
		Start With	bb.UP_LVL = a.ITEM_SEQ
			And		bb.PROJ_CODE = a.PROJ_CODE
			And		aa.CHG_DEGREE = a.CHG_DEGREE
		Connect By
				Prior	bb.PROJ_CODE = bb.PROJ_CODE
			And	Prior	bb.ITEM_SEQ = bb.UP_LVL
			And	Prior	aa.CHG_DEGREE = a.CHG_DEGREE
	)) CONTR_EXP_AMT_SUM
From
	(
		Select
			b.PROJ_CODE ,
			a.CHG_DEGREE ,
			b.ITEM_SEQ ,
			b.NAME,
			b.UP_LVL ,
			b.LVL_SEQ ,
			a.EXEC_MATR_AMT,
			a.EXEC_LAB_AMT,
			a.EXEC_SUBCONTR_AMT,
			a.EXEC_EQUIP_AMT,
			a.EXEC_EXP_AMT,
			a.CONTR_MATR_AMT,
			a.CONTR_LAB_AMT,
			a.CONTR_EXP_AMT,
			Decode((
			/*+first_rows */
				Select
					1
				From	TAC_E_PART_STRUCTURE c
				Where	b.PROJ_CODE = c.PROJ_CODE
				And		b.ITEM_SEQ = c.UP_LVL
				And		RowNum < 2
			) ,1,'F','T') IS_LEAF_TAG
		From	TAC_E_EXEC_LIST_MASTER a,
				TAC_E_PART_STRUCTURE b
		Where	a.PROJ_CODE = b.PROJ_CODE
		And		a.ITEM_SEQ = b.ITEM_SEQ
		And		a.PROJ_CODE = 'K04099'
		And		a.CHG_DEGREE = 2
	) a
Start With
	a.UP_LVL = 0
Connect By
		Prior	a.PROJ_CODE = a.PROJ_CODE
	And	Prior	a.ITEM_SEQ = a.UP_LVL
Order Siblings By
	a.LVL_SEQ
/

