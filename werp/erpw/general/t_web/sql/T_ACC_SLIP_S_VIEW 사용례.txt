SELECT 
	D.MAKE_COMP_CODE,
	D.MAKE_DT,
	--D.MAKE_SEQ,
	--D.MAKE_SLIPNO||'-'||D.MAKE_SLIPLINE MAKE_SLIPNOLINE,
	D.SLIP_KIND_TAG,
 	B.ACC_GRP, 
 	C.CODE_LIST_NAME ACC_GRP_NAME, 
 	A.ACC_CODE_P, 
 	A.ROW_COLOR, 
 	A.ROW_TYPE, 
 	LPAD(' ',(B.ACC_LVL-1)*2)||B.ACC_NAME  ACC_NAME_P, 
	CASE 
		WHEN A.ROW_TYPE  = 'A' AND A.SLIP_ID = 0  THEN '<이전잔액>' 
		WHEN A.ROW_TYPE  = 'A' THEN F_T_Datetostring(D.MAKE_DT)
		ELSE '합  계' 
	END MAKE_DT_P,
	A.SLIP_ID, 
	A.SLIP_IDSEQ, 
	(A.DB_AMT) DB_AMT, 
	(A.CR_AMT) CR_AMT, 
	(A.REMAIN_AMT) REMAIN_AMT, 
	(A.Running_Total) Running_Total,
	D.DEPT_CODE,
	--D.DEPT_NAME,
	--D.SUMMARY1 ,
	--D.SUMMARY2 ,
	--DECODE(D.BANK_CODE,NULL,D.CUST_CODE,D.BANK_CODE) CUST_BANK_CODE,
	--DECODE(D.BANK_CODE,NULL,D.CUST_NAME,D.BANK_NAME) CUST_BANK_NAME,
	A.CNT 
FROM 
( 
 	SELECT 
 		DISTINCT 
 		A.ACC_CODE1,  
 		A.ACC_CODE2,  
 		A.ACC_CODE3,  
 		A.ACC_CODE4, 
 		A.ACC_CODE5, 
 		A.ACC_CODE6, 
 		CASE 
 			WHEN A.ACC_CODE6  IS NOT NULL THEN A.ACC_CODE6 
			WHEN A.ACC_CODE5  IS NOT NULL THEN A.ACC_CODE5 
			WHEN A.ACC_CODE4  IS NOT NULL THEN A.ACC_CODE4 
 			WHEN A.ACC_CODE3  IS NOT NULL THEN A.ACC_CODE3 
 			WHEN A.ACC_CODE2  IS NOT NULL THEN A.ACC_CODE2 
 			WHEN A.ACC_CODE1  IS NOT NULL THEN A.ACC_CODE1 
 		END ACC_CODE_P, 
 		CASE 
 			WHEN B.SLIP_ID IS NOT NULL THEN 'A' 
 			WHEN A.ACC_CODE6  IS NOT NULL THEN 'B' 
			WHEN A.ACC_CODE5  IS NOT NULL THEN 'C' 
			WHEN A.ACC_CODE4  IS NOT NULL THEN 'D' 
 			WHEN A.ACC_CODE3  IS NOT NULL THEN 'E' 
 			WHEN A.ACC_CODE2  IS NOT NULL THEN 'F' 
 			WHEN A.ACC_CODE1  IS NOT NULL THEN 'G' 
 		END ROW_TYPE, 
 		CASE 
 			WHEN A.ACC_CODE6  IS NOT NULL THEN '#FFFFFF' 
 			WHEN A.ACC_CODE5  IS NOT NULL THEN '#FFFFFF' 
 			WHEN A.ACC_CODE4  IS NOT NULL THEN '#EFEEFF' 
 			WHEN A.ACC_CODE3  IS NOT NULL THEN '#D1ECC8' 
 			WHEN A.ACC_CODE2  IS NOT NULL THEN '#D3D3D3' 
 			WHEN A.ACC_CODE1  IS NOT NULL THEN '#BFBEFF' 
 		END ROW_COLOR, 
		B.MAKE_DT,
 		B.SLIP_ID, 
 		B.SLIP_IDSEQ, 
 		SUM(B.DB_AMT) DB_AMT, 
 		SUM(B.CR_AMT) CR_AMT, 
 		SUM(B.REMAIN_AMT) REMAIN_AMT, 
 		DECODE(NVL(B.SLIP_ID, 0), 0, SUM(B.REMAIN_AMT), SUM(B.Running_Total) ) Running_Total, 
 		COUNT(*) CNT
	FROM
	(
	 	-- 계정집계 분류 생성 시작	
		SELECT 
			NVL(MAX(DECODE(b.ACC_LVL,1,a.PARENT_ACC_CODE)),'') ACC_CODE1, 
			NVL(MAX(DECODE(b.ACC_LVL,2,a.PARENT_ACC_CODE)),'') ACC_CODE2, 
			NVL(MAX(DECODE(b.ACC_LVL,3,a.PARENT_ACC_CODE)),'') ACC_CODE3, 
			NVL(MAX(DECODE(b.ACC_LVL,4,a.PARENT_ACC_CODE)),'') ACC_CODE4, 
			NVL(MAX(DECODE(b.ACC_LVL,5,a.PARENT_ACC_CODE)),'') ACC_CODE5,
			NVL(MAX(DECODE(b.ACC_LVL,6,a.PARENT_ACC_CODE)),'') ACC_CODE6,
			A.ACC_CODE
		FROM
		(
			SELECT 
				C.PARENT_ACC_CODE, A.COL_VALUE01 ACC_CODE
			FROM 
				T_WORK_REPORT A, 
				T_ACC_CODE B, 
				T_ACC_CODE_CHILD C
			WHERE
				A.PAGE_ID = 't_RSheetReport0001'
				AND A.COL_VALUE01 = B.ACC_CODE
				AND FUND_INPUT_CLS='T'
				AND A.COL_VALUE01 = C.CHILD_ACC_CODE 
			UNION ALL
			SELECT 
				A.COL_VALUE01 PARENT_ACC_CODE, A.COL_VALUE01 ACC_CODE
			FROM 
				T_WORK_REPORT A,
				T_ACC_CODE B
			WHERE
				A.PAGE_ID = 't_RSheetReport0001'
				AND A.COL_VALUE01 = B.ACC_CODE
				AND FUND_INPUT_CLS='T'
		) A,
		T_ACC_CODE B
		WHERE
			A.PARENT_ACC_CODE = B.ACC_CODE
		GROUP BY 
			A.ACC_CODE 
		-- 계정집계 분류 생성 시작 끝			
	) A,
	(
		SELECT
			B.ACC_GRP,
			B.ACC_CODE,
			B.ACC_NAME,
			B.MAKE_DT,
			B.SLIP_ID,
			B.SLIP_IDSEQ,
			B.DB_AMT,
			B.CR_AMT,
			B.REMAIN_AMT,
			SUM(B.REMAIN_AMT) Over (
				PARTITION BY
					B.ACC_GRP,
					B.ACC_CODE,
					B.ACC_NAME
				ORDER BY 
					B.ACC_GRP,
					B.ACC_CODE,
					B.ACC_NAME,
					B.MAKE_DT,
					B.SLIP_ID,
					B.SLIP_IDSEQ
					RANGE 	BETWEEN 	Unbounded Preceding AND	CURRENT ROW
			) Running_Total 
		FROM
		(
			SELECT
				D.ACC_GRP,
				D.ACC_CODE,
			 	D.ACC_NAME,
				NVL(MIN(
					CASE 
						WHEN A.MAKE_DT >= F_T_StringToDate(:DT_F) THEN F_T_DateToString(A.MAKE_DT)
					END
				),NULL) MAKE_DT,
				0 SLIP_ID,
				0 SLIP_IDSEQ,
				0 DB_AMT,
				0 CR_AMT,
				NVL(SUM(
					CASE 
						WHEN A.MAKE_DT < :DT_F THEN 
							CASE 
								WHEN D.ACC_REMAIN_POSITION = 'D' THEN NVL(a.DB_AMT,0)-NVL(a.CR_AMT,0)		 
								ELSE NVL(a.CR_AMT,0)-NVL(a.DB_AMT,0)
							END 
					END
				),0) REMAIN_AMT
			FROM
				T_ACC_SLIP_BODY1 A,
				T_WORK_REPORT B,
				T_CUST_CODE C,
				T_ACC_CODE D
			WHERE 
				B.PAGE_ID = 't_RSheetReport0001'
				AND A.ACC_CODE = B.COL_VALUE01
				AND A.CUST_SEQ = C.CUST_SEQ
				AND A.ACC_CODE = D.ACC_CODE
				AND a.COMP_CODE = :COMP_CODE
				AND a.DEPT_CODE LIKE :DEPT_CODE||'%'  
				AND NVL(C.CUST_CODE,' ') LIKE :CUST_CODE||'%'
				AND 
				(
					(
					 	( A.MAKE_DT < F_T_StringToDate(:DT_F) )
						AND
						( TO_CHAR(A.MAKE_DT,'YYYYMMDD') LIKE SUBSTR(:DT_T , 1, 4) ||'%' )
					)
					OR
					(
					  	( A.MAKE_DT BETWEEN F_T_StringToDate(:DT_F) AND F_T_StringToDate(:DT_T) )
					  	AND
						( A.TRANSFER_TAG = 'F' )
					)
				)
				AND A.KEEP_DT IS NOT NULL
			GROUP BY
				D.ACC_GRP,
				D.ACC_CODE,
				D.ACC_NAME
			UNION ALL
			SELECT
				D.ACC_GRP,
				D.ACC_CODE,
			 	D.ACC_NAME,
				F_T_DateToString(A.MAKE_DT) MAKE_DT,
				A.SLIP_ID,
				A.SLIP_IDSEQ,
				NVL(a.DB_AMT,0) DB_AMT,
				NVL(a.CR_AMT,0) CR_AMT,
				CASE 
					WHEN D.ACC_REMAIN_POSITION = 'D' THEN NVL(a.DB_AMT,0)-NVL(a.CR_AMT,0)		 
					ELSE NVL(a.CR_AMT,0)-NVL(a.DB_AMT,0)
				END
				REMAIN_AMT
			FROM
				T_ACC_SLIP_BODY1 A,
				T_WORK_REPORT B,
				T_CUST_CODE C,
				T_ACC_CODE D
			WHERE 
				B.PAGE_ID = 't_RSheetReport0001'
				AND A.ACC_CODE = B.COL_VALUE01
				AND A.CUST_SEQ = C.CUST_SEQ
				AND A.ACC_CODE = D.ACC_CODE
				AND a.COMP_CODE = :COMP_CODE
				AND a.DEPT_CODE LIKE :DEPT_CODE||'%'  
				AND NVL(C.CUST_CODE,' ') LIKE :CUST_CODE||'%'
				AND 
				(
					(
					  	( A.MAKE_DT BETWEEN F_T_StringToDate(:DT_F) AND F_T_StringToDate(:DT_T) )
					  	AND
						( A.TRANSFER_TAG = 'F' )
					)
				)
				AND A.KEEP_DT IS NOT NULL
			ORDER BY
				ACC_GRP,
				ACC_CODE,
				SLIP_ID,
				SLIP_IDSEQ
			) B
		) B
	WHERE                                                       
		a.ACC_CODE = b.ACC_CODE
	GROUP BY GROUPING SETS
	(
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3, 
			A.ACC_CODE4, 
			A.ACC_CODE5, 
			A.ACC_CODE6,
			A.ACC_CODE,
			B.MAKE_DT,
			B.SLIP_ID,
			B.SLIP_IDSEQ
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3, 
			A.ACC_CODE4, 
			A.ACC_CODE5, 
			A.ACC_CODE6,
			A.ACC_CODE
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3, 
			A.ACC_CODE4, 
			A.ACC_CODE5, 
			A.ACC_CODE6
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3, 
			A.ACC_CODE4, 
			A.ACC_CODE5
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3, 
			A.ACC_CODE4
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2, 
			A.ACC_CODE3
		),
		(
			a.ACC_CODE1, 
			A.ACC_CODE2
		),
		(
			a.ACC_CODE1
		)
	)
) A,
T_ACC_CODE B,
(
	SELECT
		CODE_LIST_ID,
		CODE_LIST_NAME
	FROM
		V_T_CODE_LIST
	WHERE
		CODE_GROUP_ID = 'ACC_GRP'
) C,
T_ACC_SLIP_S_VIEW D 
WHERE
	A.ACC_CODE_P = B.ACC_CODE
	AND B.ACC_GRP = C.CODE_LIST_ID
	AND NOT (A.ROW_TYPE = 'B' AND A.CNT = 1)
	AND A.SLIP_ID = D.SLIP_ID(+)
	AND A.SLIP_IDSEQ = D.SLIP_IDSEQ(+)
ORDER BY
	B.ACC_GRP,
	a.ACC_CODE1,
	A.ACC_CODE2,
	A.ACC_CODE3,
	A.ACC_CODE4,
	A.ACC_CODE5,
	A.ACC_CODE6,
	A.MAKE_DT,
	A.SLIP_ID,
	A.SLIP_IDSEQ	