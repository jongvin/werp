CREATE OR REPLACE PROCEDURE SP_T_ACC_SUM_TRANSFER
(
	Ar_COMP_CODE		VARCHAR2,
	Ar_CLSE_ACC_ID			VARCHAR2,
	Ar_CRTUSERNO			VARCHAR2
)
IS
/***************************************************/
/* 이 프로그램은 대보시스템(주) 의 재산입니다.
/* 최초작성자 : 김흥수
/* 최초작성일 : 2004-12-15
/* 최종수정자 :
/* 최종수정일 :
/***************************************************/
	lnSLIP_ID     T_ACC_SLIP_BODY.SLIP_ID%TYPE;
	lnSLIP_IDSEQ     T_ACC_SLIP_BODY.SLIP_IDSEQ%TYPE;
	lnMAKE_SLIPLINE  T_ACC_SLIP_BODY.MAKE_SLIPLINE%TYPE;
	lnMAKE_SEQ       T_ACC_SLIP_HEAD.MAKE_SEQ%TYPE;

	lrT_YEAR_CLOSE_FROM	 T_YEAR_CLOSE%ROWTYPE;
	lrT_YEAR_CLOSE_TO 		T_YEAR_CLOSE%ROWTYPE;
	lrZ_AUTHORITY_USER	    Z_AUTHORITY_USER%ROWTYPE;
	lrT_COMPANY	    			  T_COMPANY%ROWTYPE;
	lrT_ACC_SLIP_HEAD	 T_ACC_SLIP_HEAD%ROWTYPE;
	
	lsCLSE_CLS							T_YEAR_CLOSE.CLSE_CLS%TYPE;
BEGIN
	BEGIN
		SELECT
			*
		INTO
			lrT_YEAR_CLOSE_FROM
		FROM
			T_YEAR_CLOSE a
		WHERE
			 a.COMP_CODE = Ar_COMP_CODE
			 AND a.CLSE_ACC_ID = Ar_CLSE_ACC_ID;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009, Ar_CLSE_ACC_ID||'년 회기정보를 찾을 수 없습니다.');
	END;
	
	BEGIN
		SELECT
			*
		INTO
			lrT_YEAR_CLOSE_TO
		FROM
			T_YEAR_CLOSE a
		WHERE
			 a.COMP_CODE = Ar_COMP_CODE
			 AND TO_NUMBER(a.CLSE_ACC_ID) = (TO_NUMBER(Ar_CLSE_ACC_ID)+1);
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009, (TO_NUMBER(Ar_CLSE_ACC_ID)+1)||'년 회기정보를 찾을 수 없습니다.');
	END;
	
	BEGIN
		SELECT
			*
		INTO
			lrZ_AUTHORITY_USER
		FROM
			Z_AUTHORITY_USER a
		WHERE
			 a.EMPNO = Ar_CRTUSERNO;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009, '사용자정보를 찾을 수 없습니다.');
	END;
	
	BEGIN
		SELECT
			*
		INTO lrT_COMPANY
		FROM
			T_COMPANY
		WHERE
			COMP_CODE = Ar_COMP_CODE;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009, '사업장정보가 존재하지 않습니다.');
	END;
	
	--년 마감 검증
	BEGIN
		IF NVL(lrT_YEAR_CLOSE_TO.CLSE_CLS,'F') = 'T' THEN
			RAISE_APPLICATION_ERROR	(-20009,  '이월전표일자('||F_T_Datetostring(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT)||')의 회기가 이미 마감되었습니다.');
		END IF;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009,  '이월전표일자('||F_T_Datetostring(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT)||')의 회기가 등록되지 않았습니다.');
	END;

	--월 마감 검증
	BEGIN
		SELECT
			CLSE_CLS
		INTO
			lsCLSE_CLS
		FROM	T_MONTH_CLOSE
		WHERE	CLSE_MONTH = TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMM')
		AND		COMP_CODE = Ar_COMP_CODE;

		IF NVL(lsCLSE_CLS,'F') = 'T' THEN
			RAISE_APPLICATION_ERROR	(-20009,  '변경월은 이미 마감되었습니다.');
		END IF;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009,  '변경일의 월마감이 등록되지 않았습니다.');
	END;

	--일 마감 검증
	BEGIN
		SELECT
			CLSE_CLS
		INTO
			lsCLSE_CLS
		FROM	T_DAY_CLOSE
		WHERE	CLSE_DAY = lrT_YEAR_CLOSE_TO.ACCOUNT_FDT
		AND		COMP_CODE = Ar_COMP_CODE;

		IF NVL(lsCLSE_CLS,'F') = 'T' THEN
			RAISE_APPLICATION_ERROR	(-20009,  '변경일은 이미 마감되었습니다.');
		END IF;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009,  '변경일의 일마감이 등록되지 않았습니다.');
	END;

 	-- 부서 입력기간 체크
	BEGIN
		SELECT
			 CASE
			 	 WHEN (F_T_Datetostring(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT) BETWEEN F_T_Datetostring(NVL(INPUT_DT_F, '19000101')) AND F_T_Datetostring(NVL(INPUT_DT_T, '19000101')) )
				 THEN 'F' -- 입력기간
				 ELSE 'T' -- 입력마감
			END DEPT_CLSE_CLS
		INTO
			lsCLSE_CLS
		FROM
			T_DEPT_CODE_ORG A
		WHERE
			A.COMP_CODE = Ar_COMP_CODE
			AND DEPT_CODE = lrZ_AUTHORITY_USER.DEPT_CODE;

		IF NVL(lsCLSE_CLS,'F') = 'T' THEN
			RAISE_APPLICATION_ERROR	(-20009,  '이월전표일자('||F_T_Datetostring(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT)||')의 부서 입력기간이 종료되었습니다.');
		END IF;
	EXCEPTION WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR	(-20009,  '부서정보가 등록되지 않았습니다.');
	END;
	
	-- 이미 생성된 이월전표 삭제처리..
	FOR lrA IN
	(
		SELECT SLIP_ID
		FROM T_ACC_SLIP_HEAD
		WHERE
			MAKE_COMP_CODE = lrT_YEAR_CLOSE_TO.COMP_CODE
			AND MAKE_DT_TRANS = TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD')
			AND SLIP_KIND_TAG = 'D'
			AND TRANSFER_TAG = 'T'
	)
	LOOP
		BEGIN
			SELECT *
			INTO lrT_ACC_SLIP_HEAD
			FROM T_ACC_SLIP_HEAD
			WHERE
				SLIP_ID = lrA.SLIP_ID;
		EXCEPTION WHEN NO_DATA_FOUND THEN
			RAISE_APPLICATION_ERROR	(-20009, '전표가 존재하지 않습니다.');
		END;
		
		DELETE FROM T_ACC_SLIP_BODY
		WHERE	Slip_Id = lrA.SLIP_ID;

		DELETE FROM T_ACC_SLIP_HEAD
		WHERE	Slip_Id = lrA.SLIP_ID;
	END LOOP;
	
	SELECT F_T_Get_Newslip_Id()
	INTO lnSLIP_ID
	FROM DUAL;
	
	SELECT
		F_T_Get_New_Make_Seq(Ar_COMP_CODE, TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'))
	INTO lnMAKE_SEQ
	FROM
		DUAL;
		
	INSERT INTO T_ACC_SLIP_HEAD
	(
		SLIP_ID,
		CRTUSERNO,
		CRTDATE,
		MODUSERNO,
		MODDATE,
		MAKE_SLIPCLS,
		MAKE_SLIPNO,
		MAKE_COMP_CODE,
		MAKE_DEPT_CODE,
		MAKE_DT,
		MAKE_DT_TRANS,
		MAKE_SEQ,
		INOUT_DEPT_CODE,
		MAKE_PERS,
		MAKE_NAME,
		GROUPWARE_SLIPSTATUS,
		KEEP_SLIPNO,
		KEEP_DT,
		KEEP_DT_TRANS,
		KEEP_SEQ,
		KEEP_DEPT_CODE,
		KEEP_KEEPER,
		WORK_CODE,
		CHARGE_PERS,
		SLIP_KIND_TAG,
		TRANSFER_TAG,
		IGNORE_SET_RESET_TAG
	)
	VALUES
	(
		lnSLIP_ID,--AR_SLIP_ID,
		AR_CRTUSERNO,
		SYSDATE,
		NULL,
		NULL,
		'1',--AR_MAKE_SLIPCLS,
		F_T_Gen_Make_Slip_No( Ar_COMP_CODE, TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'), 'D', lnMAKE_SEQ ),--AR_MAKE_SLIP_NO,
		Ar_COMP_CODE,--AR_MAKE_COMP_CODE,
		lrZ_AUTHORITY_USER.DEPT_CODE,--AR_MAKE_DEPT_CODE,
		lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,--AR_MAKE_DT
		TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'),--AR_MAKE_DT_TRANS, 
		lnMAKE_SEQ,
		lrT_COMPANY.DEPT_CODE,--AR_INOUT_DEPT_CODE,
		lrZ_AUTHORITY_USER.EMPNO,--AR_MAKE_PERS,
		lrZ_AUTHORITY_USER.NAME,--AR_MAKE_NAME,
		NULL,--AR_GROUPWARE_SLIPSTATUS,
		F_T_Gen_Make_Slip_No( Ar_COMP_CODE, TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'), 'D', lnMAKE_SEQ ),--AR_KEEP_SLIPNO,
		lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,--AR_KEEP_DT,
		TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'),--AR_KEEP_DT_TRANS,
		NULL,--AR_KEEP_SEQ,
		lrZ_AUTHORITY_USER.DEPT_CODE,--AR_KEEP_DEPT_CODE,
		lrZ_AUTHORITY_USER.EMPNO,--AR_KEEP_KEEPER,
		NULL,--AR_WORK_CODE,
		lrZ_AUTHORITY_USER.EMPNO,--AR_CHARGE_PERS,
		'D',--AR_SLIP_KIND_TAG,
		'T',--AR_TRANSFER_TAG,
		'F'--AR_IGNORE_SET_RESET_TAG
	);
	
	lnMAKE_SLIPLINE := 0;	
	FOR lrA IN
	(
		SELECT
			A.COMP_CODE , 
			A.ACC_CODE , 
			A.CUST_SEQ , 
			C.CUST_NAME , 
			A.DEPT_CODE , 
			NVL(A.CLASS_CODE, '999999') CLASS_CODE,
			A.BANK_CODE , 
			B.ACC_REMAIN_POSITION , 
			SUM(DECODE(B.ACC_REMAIN_POSITION,'D',NVL(A.DB_AMT,0)-NVL(A.CR_AMT,0),0)) DB_AMT , 
			SUM(DECODE(B.ACC_REMAIN_POSITION,'C',NVL(A.CR_AMT,0)-NVL(A.DB_AMT,0),0)) CR_AMT  
		FROM
			T_ACC_SLIP_BODY1 A, 
			T_ACC_CODE      B, 
			T_CUST_CODE    C
		WHERE  
			A.ACC_CODE =  B.ACC_CODE 
			AND A.CUST_SEQ =  C.CUST_SEQ(+) 
			AND B.ACC_GRP IN ('1','2','3')
			--AND A.CLASS_CODE IS NOT NULL
			AND A.MAKE_COMP_CODE = lrT_YEAR_CLOSE_FROM.COMP_CODE  
			AND MAKE_DT BETWEEN lrT_YEAR_CLOSE_FROM.ACCOUNT_FDT AND lrT_YEAR_CLOSE_FROM.ACCOUNT_EDT
		GROUP BY
			A.COMP_CODE , 
			A.ACC_CODE , 
			A.CUST_SEQ , 
			C.CUST_NAME , 
			A.DEPT_CODE , 
			A.CLASS_CODE , 
			A.BANK_CODE , 
			B.ACC_REMAIN_POSITION
		HAVING
			SUM(DECODE(B.ACC_REMAIN_POSITION,'D',NVL(A.DB_AMT,0)-NVL(A.CR_AMT,0),0))<>0
			OR
			SUM(DECODE(B.ACC_REMAIN_POSITION,'C',NVL(A.CR_AMT,0)-NVL(A.DB_AMT,0),0))<>0
		ORDER BY
			A.COMP_CODE , 
			A.ACC_CODE , 
			A.CUST_SEQ , 
			C.CUST_NAME , 
			A.DEPT_CODE , 
			A.CLASS_CODE , 
			A.BANK_CODE , 
			B.ACC_REMAIN_POSITION 
	)
	LOOP
		BEGIN
			SELECT F_T_Get_Newslip_Idseq()
			INTO lnSLIP_IDSEQ
			FROM DUAL;
		END;
		
		lnMAKE_SLIPLINE := lnMAKE_SLIPLINE + 1;
		
		INSERT INTO T_ACC_SLIP_BODY
		(
			SLIP_ID ,
	      	SLIP_IDSEQ ,
	      	CRTUSERNO ,
	      	CRTDATE ,
	      	MAKE_SLIPLINE ,
	      	ACC_CODE ,
	      	DB_AMT ,
	      	CR_AMT ,
	      	SUMMARY_CODE ,
	      	TAX_COMP_CODE ,
	      	COMP_CODE ,
	      	DEPT_CODE ,
	      	CLASS_CODE ,
	      	VAT_CODE ,
	      	VAT_DT ,
	      	SUPAMT ,
	      	VATAMT ,
	      	CUST_SEQ ,
	      	CUST_NAME ,
	      	BANK_CODE ,
	      	ACCNO ,
	      	RESET_SLIP_ID ,
	      	RESET_SLIP_IDSEQ ,
	      	SUMMARY1 ,
	      	SUMMARY2 ,
			CARD_SEQ,
	      	CHK_NO ,
	      	BILL_NO ,
	      	REC_BILL_NO ,
	      	CP_NO ,
	      	SECU_NO ,
	      	LOAN_NO ,
	      	LOAN_REFUND_NO ,
	      	LOAN_REFUND_SEQ ,
	      	DEPOSIT_ACCNO ,
	      	PAYMENT_SEQ ,
	      	PAY_CON_CASH ,
	      	PAY_CON_BILL ,
	      	PAY_CON_BILL_DT ,
	      	PAY_CON_BILL_DAYS,
	      	EMP_NO ,
	      	ANTICIPATION_DT ,
	      	MNG_ITEM_CHAR1 ,
	      	MNG_ITEM_CHAR2 ,
	      	MNG_ITEM_CHAR3 ,
	      	MNG_ITEM_CHAR4 ,
	      	MNG_ITEM_NUM1 ,
	      	MNG_ITEM_NUM2 ,
	      	MNG_ITEM_NUM3 ,
	      	MNG_ITEM_NUM4 ,
	      	MNG_ITEM_DT1 ,
	      	MNG_ITEM_DT2 ,
	      	MNG_ITEM_DT3 ,
	      	MNG_ITEM_DT4
		)
		VALUES
		(
			lnSLIP_ID ,
	      	lnSLIP_IDSEQ ,
	      	AR_CRTUSERNO,
			SYSDATE,
	      	lnMAKE_SLIPLINE ,
	      	lrA.ACC_CODE ,
	      	lrA.DB_AMT ,
	      	lrA.CR_AMT ,
	      	NULL,--SUMMARY_CODE ,
	      	lrA.COMP_CODE ,
	      	lrA.COMP_CODE ,
	      	lrA.DEPT_CODE ,
	      	lrA.CLASS_CODE ,
	      	NULL,--AR_VAT_CODE ,
	      	NULL,--F_T_STRINGTODATE(AR_VAT_DT) ,
	      	0,--AR_SUPAMT ,
	      	0,--AR_VATAMT ,
	      	NULL,--lrSLIP_BODY.CUST_SEQ ,
	      	NULL,--lrSLIP_BODY.CUST_NAME ,
	      	lrA.BANK_CODE ,
	      	NULL,--lrT_ACC_CREDCARD.ACCNO ,
	      	NULL,--lrSLIP_BODY.RESET_SLIP_ID,
	      	NULL,--lrSLIP_BODY.RESET_SLIP_IDSEQ,
			Ar_CLSE_ACC_ID||'년 이월전표',--AR_SUMMARY1 , 
	      	NULL,--AR_SUMMARY2 ,
			NULL,--lrT_ACC_CREDCARD.CARD_SEQ,
	      	NULL,--AR_CHK_NO ,
	      	NULL,--AR_BILL_NO ,
	      	NULL,--AR_REC_BILL_NO ,
	      	NULL,--AR_CP_NO ,
	      	NULL,--AR_SECU_NO ,
	      	NULL,--AR_LOAN_NO ,
	      	NULL,--AR_LOAN_REFUND_NO ,
	      	NULL,--AR_LOAN_REFUND_SEQ ,
	      	NULL,--lrSLIP_BODY.DEPOSIT_ACCNO ,
	      	NULL,--lrSLIP_BODY.PAYMENT_SEQ ,
	      	NULL,--lrSLIP_BODY.PAY_CON_CASH ,
	      	NULL,--lrSLIP_BODY.PAY_CON_BILL ,
	      	NULL,--lrSLIP_BODY.PAY_CON_BILL_DT,
	      	NULL,--lrSLIP_BODY.PAY_CON_BILL_DAYS,
	      	NULL,--lrSLIP_BODY.EMP_NO ,
	      	NULL,--lrSLIP_BODY.ANTICIPATION_DT ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_CHAR1 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_CHAR2 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_CHAR3 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_CHAR4 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_NUM1 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_NUM2 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_NUM3 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_NUM4 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_DT1 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_DT2 ,
	      	NULL,--lrSLIP_BODY.MNG_ITEM_DT3 ,
	      	NULL--lrSLIP_BODY.MNG_ITEM_DT4
		);
	END LOOP;
	
	Sp_T_Sum_Daily_From_To(
		TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'),
		TO_CHAR(lrT_YEAR_CLOSE_TO.ACCOUNT_FDT,'YYYYMMDD'),
		lrZ_AUTHORITY_USER.EMPNO
	);

END;
/